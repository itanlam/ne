{"ast":null,"code":"import request from \"@/utils/scripts/request\";\nimport storedToken from \"@/utils/scripts/storedToken\";\nimport { ENV } from \"@/utils/config\";\nimport { notice } from \"@/core\";\nexport default async function deleteSer({\n  oldData,\n  SchemaName\n}) {\n  const token = await storedToken();\n  const res = await request(`/content-manager/explorer/application::${SchemaName}.${SchemaName}/${oldData.id}`, {\n    prefix: ENV.MAIN_URL,\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (res.error) {\n    await notice({\n      title: \"Sorry, you can't delete this item\",\n      severity: \"warning\",\n      content: JSON.stringify(oldData)\n    });\n  } else {\n    await notice({\n      title: \"Successful\",\n      severity: \"success\"\n    });\n  }\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/services/deleteSer.tsx"],"names":["request","storedToken","ENV","notice","deleteSer","oldData","SchemaName","token","res","id","prefix","MAIN_URL","method","headers","Authorization","error","title","severity","content","JSON","stringify"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAOA,eAAe,eAAeC,SAAf,CAAyB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAzB,EAA8D;AAC3E,QAAMC,KAAK,GAAG,MAAMN,WAAW,EAA/B;AAEA,QAAMO,GAAG,GAAG,MAAMR,OAAO,CACtB,0CAAyCM,UAAW,IAAGA,UAAW,IAAGD,OAAO,CAACI,EAAG,EAD1D,EAEvB;AACEC,IAAAA,MAAM,EAAER,GAAG,CAACS,QADd;AAEEC,IAAAA,MAAM,EAAE,QAFV;AAGEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASP,KAAM;AADxB;AAHX,GAFuB,CAAzB;;AAWA,MAAIC,GAAG,CAACO,KAAR,EAAe;AACb,UAAMZ,MAAM,CAAC;AACXa,MAAAA,KAAK,EAAE,mCADI;AAEXC,MAAAA,QAAQ,EAAE,SAFC;AAGXC,MAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAef,OAAf;AAHE,KAAD,CAAZ;AAKD,GAND,MAMO;AACL,UAAMF,MAAM,CAAC;AACXa,MAAAA,KAAK,EAAE,YADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAD,CAAZ;AAID;AACF","sourcesContent":["import request from \"@/utils/scripts/request\"\nimport storedToken from \"@/utils/scripts/storedToken\"\nimport { ENV } from \"@/utils/config\"\nimport { notice } from \"@/core\"\nimport { EditableCtrl } from \"../types\"\n\ninterface Props<RowData> extends EditableCtrl {\n  oldData: RowData\n}\n\nexport default async function deleteSer({ oldData, SchemaName }: Props<any>) {\n  const token = await storedToken()\n\n  const res = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}/${oldData.id}`,\n    {\n      prefix: ENV.MAIN_URL,\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  if (res.error) {\n    await notice({\n      title: \"Sorry, you can't delete this item\",\n      severity: \"warning\",\n      content: JSON.stringify(oldData)\n    })\n  } else {\n    await notice({\n      title: \"Successful\",\n      severity: \"success\"\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}