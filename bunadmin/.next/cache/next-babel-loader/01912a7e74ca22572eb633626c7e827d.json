{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Remote data controller\n */\nimport { notice } from \"@/core\";\nimport listSer from \"../services/listSer\";\nexport default function dataCtrl(_x) {\n  return _dataCtrl.apply(this, arguments);\n}\n\nfunction _dataCtrl() {\n  _dataCtrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _yield$listSer, data, errors, totalCount;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return listSer(query);\n\n          case 2:\n            _yield$listSer = _context.sent;\n            data = _yield$listSer.data;\n            errors = _yield$listSer.errors;\n            totalCount = _yield$listSer.totalCount;\n\n            if (!errors) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return notice({\n              title: \"Fetch error\",\n              severity: \"error\",\n              content: JSON.stringify(errors)\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", {\n              page: query.page,\n              data: [],\n              totalCount: 0\n            });\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              page: query.page,\n              data: data,\n              totalCount: totalCount\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _dataCtrl.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/buncms-user/list/controllers/dataCtrl.tsx"],"names":["notice","listSer","dataCtrl","query","data","errors","totalCount","title","severity","content","JSON","stringify","page"],"mappings":";;;AAAA;;;AAIA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,wBAA8BC,QAA9B;AAAA;AAAA;;;uEAAe,iBAAwBC,KAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC8BF,OAAO,CAACE,KAAD,CADrC;;AAAA;AAAA;AACLC,YAAAA,IADK,kBACLA,IADK;AACCC,YAAAA,MADD,kBACCA,MADD;AACSC,YAAAA,UADT,kBACSA,UADT;;AAAA,iBAGTD,MAHS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAILL,MAAM,CAAC;AACXO,cAAAA,KAAK,EAAE,aADI;AAEXC,cAAAA,QAAQ,EAAE,OAFC;AAGXC,cAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAHE,aAAD,CAJD;;AAAA;AAAA,6CASJ;AACLO,cAAAA,IAAI,EAAET,KAAK,CAACS,IADP;AAELR,cAAAA,IAAI,EAAE,EAFD;AAGLE,cAAAA,UAAU,EAAE;AAHP,aATI;;AAAA;AAAA,6CAgBN;AACLM,cAAAA,IAAI,EAAET,KAAK,CAACS,IADP;AAELR,cAAAA,IAAI,EAAJA,IAFK;AAGLE,cAAAA,UAAU,EAAEA;AAHP,aAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Remote data controller\n */\nimport { Query } from \"material-table\"\nimport { notice } from \"@/core\"\nimport listSer from \"../services/listSer\"\n\nexport default async function dataCtrl(query: Query<any>) {\n  const { data, errors, totalCount } = await listSer(query)\n\n  if (errors) {\n    await notice({\n      title: \"Fetch error\",\n      severity: \"error\",\n      content: JSON.stringify(errors)\n    })\n    return {\n      page: query.page,\n      data: [],\n      totalCount: 0\n    }\n  }\n\n  return {\n    page: query.page,\n    data,\n    totalCount: totalCount\n  }\n}\n"]},"metadata":{},"sourceType":"module"}