{"ast":null,"code":"import verify from \"./verify\";\nimport { DynamicRoute, UserRoute } from \"@/utils/routes\";\nconst delayMS = 600; // (ms) delay for animation\n\nconst isIgnoredPaths = asPath => {\n  return asPath.indexOf(UserRoute.signIn) > -1;\n};\n\nasync function security({\n  setReady,\n  router\n}) {\n  function delayReady() {\n    setTimeout(() => setReady(true), delayMS);\n  }\n\n  const {\n    asPath\n  } = router;\n\n  if (isIgnoredPaths(asPath)) {\n    delayReady();\n  }\n\n  const userProfile = await verify(); // Authentication rule (check profile & id exists)\n\n  const isVerified = userProfile && userProfile.id;\n\n  if (isVerified) {\n    delayReady();\n  } else {\n    // const isIgnoredOrigins = asPath.indexOf(`?redirect=${asPath}`) > -1\n    let toUrl = `${UserRoute.signIn}?redirect=${asPath}`;\n    toUrl = toUrl.replace(`?redirect=${UserRoute.signIn}`, \"\");\n    router.replace(DynamicRoute, toUrl).then(_r => setReady(true));\n  }\n}\n\nexport default security;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/buncms-user/utils/security.tsx"],"names":["verify","DynamicRoute","UserRoute","delayMS","isIgnoredPaths","asPath","indexOf","signIn","security","setReady","router","delayReady","setTimeout","userProfile","isVerified","id","toUrl","replace","then","_r"],"mappings":"AAEA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AAEA,MAAMC,OAAO,GAAG,GAAhB,C,CAAoB;;AAOpB,MAAMC,cAAc,GAAIC,MAAD,IAAoB;AACzC,SAAOA,MAAM,CAACC,OAAP,CAAeJ,SAAS,CAACK,MAAzB,IAAmC,CAAC,CAA3C;AACD,CAFD;;AAIA,eAAeC,QAAf,CAAwB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAxB,EAAqD;AACnD,WAASC,UAAT,GAAsB;AACpBC,IAAAA,UAAU,CAAC,MAAMH,QAAQ,CAAC,IAAD,CAAf,EAAuBN,OAAvB,CAAV;AACD;;AACD,QAAM;AAAEE,IAAAA;AAAF,MAAaK,MAAnB;;AAEA,MAAIN,cAAc,CAACC,MAAD,CAAlB,EAA4B;AAC1BM,IAAAA,UAAU;AACX;;AAED,QAAME,WAAW,GAAG,MAAMb,MAAM,EAAhC,CAVmD,CAWnD;;AACA,QAAMc,UAAU,GAAGD,WAAW,IAAIA,WAAW,CAACE,EAA9C;;AAEA,MAAID,UAAJ,EAAgB;AACdH,IAAAA,UAAU;AACX,GAFD,MAEO;AACL;AACA,QAAIK,KAAK,GAAI,GAAEd,SAAS,CAACK,MAAO,aAAYF,MAAO,EAAnD;AACAW,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAe,aAAYf,SAAS,CAACK,MAAO,EAA5C,EAA+C,EAA/C,CAAR;AACAG,IAAAA,MAAM,CAACO,OAAP,CAAehB,YAAf,EAA6Be,KAA7B,EAAoCE,IAApC,CAAyCC,EAAE,IAAIV,QAAQ,CAAC,IAAD,CAAvD;AACD;AACF;;AAED,eAAeD,QAAf","sourcesContent":["import { Dispatch, SetStateAction } from \"react\"\nimport { NextRouter } from \"next/router\"\nimport verify from \"./verify\"\nimport { DynamicRoute, UserRoute } from \"@/utils/routes\"\n\nconst delayMS = 600 // (ms) delay for animation\n\ninterface Props {\n  setReady: Dispatch<SetStateAction<boolean>>\n  router: NextRouter\n}\n\nconst isIgnoredPaths = (asPath: string) => {\n  return asPath.indexOf(UserRoute.signIn) > -1\n}\n\nasync function security({ setReady, router }: Props) {\n  function delayReady() {\n    setTimeout(() => setReady(true), delayMS)\n  }\n  const { asPath } = router\n\n  if (isIgnoredPaths(asPath)) {\n    delayReady()\n  }\n\n  const userProfile = await verify()\n  // Authentication rule (check profile & id exists)\n  const isVerified = userProfile && userProfile.id\n\n  if (isVerified) {\n    delayReady()\n  } else {\n    // const isIgnoredOrigins = asPath.indexOf(`?redirect=${asPath}`) > -1\n    let toUrl = `${UserRoute.signIn}?redirect=${asPath}`\n    toUrl = toUrl.replace(`?redirect=${UserRoute.signIn}`, \"\")\n    router.replace(DynamicRoute, toUrl).then(_r => setReady(true))\n  }\n}\n\nexport default security\n"]},"metadata":{},"sourceType":"module"}