{"ast":null,"code":"import userSignInService from \"../services/signInService\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection as Setting } from \"@/core/setting/collections\";\nimport { Collection as Auth } from \"@/core/auth/collections\";\nimport { Primary } from \"@/core/auth/schema\";\nimport { DynamicRoute } from \"@/utils/routes\";\nimport { notice } from \"@/core\";\n\nconst submitController = async ({\n  t,\n  values,\n  setSubmitting,\n  router\n}) => {\n  const res = await userSignInService(values);\n  setSubmitting(false); // Sign-in successfully\n\n  if (res && res.token) {\n    // store user profile\n    const primary = Primary;\n    const updated_at = Date.now();\n    const db = await rxDb(); // store auth\n\n    await db[Auth.name].upsert({\n      [primary]: res.username,\n      token: res.token,\n      role: res.role,\n      details: JSON.stringify(res),\n      updated_at\n    }); // update username in setting\n\n    await db[Setting.name].upsert({\n      name: Primary,\n      value: res[Primary],\n      updated_at: Date.now()\n    }); // show notice\n\n    await notice({\n      title: t(\"Sign in successful\")\n    }); // push to origin url\n\n    const {\n      asPath\n    } = router;\n    const pathArr = asPath.split(\"?redirect=\");\n    const redirect = pathArr[1] || \"/\";\n    const regex = /\\//g;\n    const matchStr = redirect.match(regex) || []; // is match /[group]/[name]\n\n    const isMatch = matchStr.length === 2;\n\n    if (regex && isMatch) {\n      router.replace(DynamicRoute, redirect).then(_r => {});\n    } else {\n      router.replace(redirect).then(_r => {});\n    }\n  } else {\n    // show notice\n    await notice({\n      title: t(\"Sign in failed\"),\n      severity: \"error\",\n      content: JSON.stringify(res)\n    });\n  }\n};\n\nexport default submitController;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/buncms-user/sign-in/controllers/submitController.tsx"],"names":["userSignInService","rxDb","Collection","Setting","Auth","Primary","DynamicRoute","notice","submitController","t","values","setSubmitting","router","res","token","primary","updated_at","Date","now","db","name","upsert","username","role","details","JSON","stringify","value","title","asPath","pathArr","split","redirect","regex","matchStr","match","isMatch","length","replace","then","_r","severity","content"],"mappings":"AACA,OAAOA,iBAAP,MAA8B,2BAA9B;AAEA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,UAAU,IAAIC,OAAvB,QAAsC,4BAAtC;AACA,SAASD,UAAU,IAAIE,IAAvB,QAAmC,yBAAnC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,MAAT,QAAuB,QAAvB;;AAUA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,CAD8B;AAE9BC,EAAAA,MAF8B;AAG9BC,EAAAA,aAH8B;AAI9BC,EAAAA;AAJ8B,CAAP,KAKZ;AACX,QAAMC,GAAG,GAAG,MAAMb,iBAAiB,CAACU,MAAD,CAAnC;AACAC,EAAAA,aAAa,CAAC,KAAD,CAAb,CAFW,CAGX;;AACA,MAAIE,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AACpB;AACA,UAAMC,OAAO,GAAGV,OAAhB;AACA,UAAMW,UAAU,GAAGC,IAAI,CAACC,GAAL,EAAnB;AAEA,UAAMC,EAAE,GAAG,MAAMlB,IAAI,EAArB,CALoB,CAMpB;;AACA,UAAMkB,EAAE,CAACf,IAAI,CAACgB,IAAN,CAAF,CAAcC,MAAd,CAAqB;AACzB,OAACN,OAAD,GAAWF,GAAG,CAACS,QADU;AAEzBR,MAAAA,KAAK,EAAED,GAAG,CAACC,KAFc;AAGzBS,MAAAA,IAAI,EAAEV,GAAG,CAACU,IAHe;AAIzBC,MAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeb,GAAf,CAJgB;AAKzBG,MAAAA;AALyB,KAArB,CAAN,CAPoB,CAcpB;;AACA,UAAMG,EAAE,CAAChB,OAAO,CAACiB,IAAT,CAAF,CAAiBC,MAAjB,CAAwB;AAC5BD,MAAAA,IAAI,EAAEf,OADsB;AAE5BsB,MAAAA,KAAK,EAAEd,GAAG,CAACR,OAAD,CAFkB;AAG5BW,MAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAHgB,KAAxB,CAAN,CAfoB,CAoBpB;;AACA,UAAMX,MAAM,CAAC;AAAEqB,MAAAA,KAAK,EAAEnB,CAAC,CAAC,oBAAD;AAAV,KAAD,CAAZ,CArBoB,CAsBpB;;AACA,UAAM;AAAEoB,MAAAA;AAAF,QAAajB,MAAnB;AACA,UAAMkB,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,YAAb,CAAhB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAAC,CAAD,CAAP,IAAc,GAA/B;AACA,UAAMG,KAAK,GAAG,KAAd;AACA,UAAMC,QAA0B,GAAGF,QAAQ,CAACG,KAAT,CAAeF,KAAf,KAAyB,EAA5D,CA3BoB,CA4BpB;;AACA,UAAMG,OAAO,GAAGF,QAAQ,CAACG,MAAT,KAAoB,CAApC;;AAEA,QAAIJ,KAAK,IAAIG,OAAb,EAAsB;AACpBxB,MAAAA,MAAM,CAAC0B,OAAP,CAAehC,YAAf,EAA6B0B,QAA7B,EAAuCO,IAAvC,CAA4CC,EAAE,IAAI,CAAE,CAApD;AACD,KAFD,MAEO;AACL5B,MAAAA,MAAM,CAAC0B,OAAP,CAAeN,QAAf,EAAyBO,IAAzB,CAA8BC,EAAE,IAAI,CAAE,CAAtC;AACD;AACF,GApCD,MAoCO;AACL;AACA,UAAMjC,MAAM,CAAC;AACXqB,MAAAA,KAAK,EAAEnB,CAAC,CAAC,gBAAD,CADG;AAEXgC,MAAAA,QAAQ,EAAE,OAFC;AAGXC,MAAAA,OAAO,EAAEjB,IAAI,CAACC,SAAL,CAAeb,GAAf;AAHE,KAAD,CAAZ;AAKD;AACF,CArDD;;AAuDA,eAAeL,gBAAf","sourcesContent":["import { Values } from \"../types\"\nimport userSignInService from \"../services/signInService\"\n\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Collection as Setting } from \"@/core/setting/collections\"\nimport { Collection as Auth } from \"@/core/auth/collections\"\nimport { Primary } from \"@/core/auth/schema\"\nimport { DynamicRoute } from \"@/utils/routes\"\nimport { NextRouter } from \"next/router\"\nimport { notice } from \"@/core\"\nimport { TFunction } from \"i18next\"\n\ninterface Props {\n  t: TFunction\n  values: Values\n  setSubmitting: (isSubmitting: boolean) => void\n  router: NextRouter\n}\n\nconst submitController = async ({\n  t,\n  values,\n  setSubmitting,\n  router\n}: Props) => {\n  const res = await userSignInService(values)\n  setSubmitting(false)\n  // Sign-in successfully\n  if (res && res.token) {\n    // store user profile\n    const primary = Primary\n    const updated_at = Date.now()\n\n    const db = await rxDb()\n    // store auth\n    await db[Auth.name].upsert({\n      [primary]: res.username,\n      token: res.token,\n      role: res.role,\n      details: JSON.stringify(res),\n      updated_at\n    })\n    // update username in setting\n    await db[Setting.name].upsert({\n      name: Primary,\n      value: res[Primary],\n      updated_at: Date.now()\n    })\n    // show notice\n    await notice({ title: t(\"Sign in successful\") })\n    // push to origin url\n    const { asPath } = router\n    const pathArr = asPath.split(\"?redirect=\")\n    const redirect = pathArr[1] || \"/\"\n    const regex = /\\//g\n    const matchStr: RegExpMatchArray = redirect.match(regex) || []\n    // is match /[group]/[name]\n    const isMatch = matchStr.length === 2\n\n    if (regex && isMatch) {\n      router.replace(DynamicRoute, redirect).then(_r => {})\n    } else {\n      router.replace(redirect).then(_r => {})\n    }\n  } else {\n    // show notice\n    await notice({\n      title: t(\"Sign in failed\"),\n      severity: \"error\",\n      content: JSON.stringify(res)\n    })\n  }\n}\n\nexport default submitController\n"]},"metadata":{},"sourceType":"module"}