{"ast":null,"code":"var _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/auth/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\";\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\";\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\";\nimport rxSubscribe from \"@/utils/database/rxSubscribe\";\nimport { Columns } from \"./columns\";\nimport { Primary, Schema } from \"./schema\";\nimport { Collection } from \"./collections\";\nimport { Collection as Setting } from \"../setting/collections\";\nimport ConfirmDialog from \"@/components/CommonDialog/ConfirmDialog\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport dynamic from \"next/dynamic\";\nimport jsonViewStyles from \"@/utils/styles/jsonViewStyles\";\nimport { Box, Button } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nconst DynamicReactJson = dynamic(() => import(\"react-json-view\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-json-view\")],\n    modules: [\"react-json-view\"]\n  }\n});\nexport default function AuthInfoContainer() {\n  const {\n    t\n  } = useTranslation(\"table\");\n  const theme = useTheme();\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: selData,\n    1: setSelData\n  } = useState();\n  const {\n    0: modalState,\n    1: setModalState\n  } = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  });\n  useEffect(() => {\n    ;\n\n    (async () => {\n      await rxSubscribe({\n        collection: Collection.name,\n        sort: {\n          updated_at: \"desc\"\n        },\n        callback: data => setData(data)\n      });\n    })();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(React.Fragment, null, __jsx(CommonTableHead, {\n    title: t(Schema.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), __jsx(CommonTable, {\n    title: t(Schema.title),\n    columns: Columns({\n      t\n    }),\n    data: data // style\n    ,\n    style: DefaultProps.style // icons\n    ,\n    icons: tableIcons({\n      theme\n    }) // options\n    ,\n    options: _objectSpread(_objectSpread({}, DefaultProps.options), {}, {\n      filtering: true,\n      grouping: true\n    }) // actions\n    ,\n    actions: [{\n      tooltip: \"Remove All Selected Items\",\n      icon: \"delete\",\n      onClick: (_evt, data) => {\n        data = data;\n        const msg = \"Do you want to delete \" + data.length + \" rows ?\";\n        setModalState({\n          title: \"Bulk delete\",\n          open: modalState.open + 1,\n          msg\n        });\n        setSelData(data);\n      }\n    }] // detailPanel\n    ,\n    detailPanel: [{\n      icon: \"assignment_ind\",\n      render: rowData => {\n        if (!rowData.details) {\n          return __jsx(\"div\", {\n            style: {\n              color: \"white\",\n              backgroundColor: theme.bunadmin.iconColor,\n              padding: \"10px 30px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 21\n            }\n          }, rowData.details || \"DETAILS IS EMPTY\");\n        } else {\n          const str = rowData.details || \"\";\n          return __jsx(DynamicReactJson, {\n            src: JSON.parse(str),\n            theme: \"summerfruit:inverted\",\n            iconStyle: \"circle\",\n            collapseStringsAfterLength: 20,\n            displayObjectSize: false,\n            displayDataTypes: false,\n            style: jsonViewStyles({\n              theme\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }\n          });\n        } // check columns\n\n      } // render\n\n    }, // item\n    {\n      icon: \"sync_alt\",\n      render: rowData => {\n        return __jsx(Box, {\n          p: 3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 19\n          }\n        }, __jsx(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          color: \"primary\",\n          onClick: async () => {\n            const db = await rxDb();\n            await db[Setting.name].upsert({\n              name: Primary,\n              value: rowData[Primary],\n              updated_at: Date.now()\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }\n        }, \"Switch to \", rowData[Primary]));\n      }\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), __jsx(ConfirmDialog, {\n    openModal: modalState.open,\n    title: modalState.title,\n    msg: modalState.msg,\n    doFunc: () => {\n      // bulk delete\n      if (selData && selData.length > 0) {\n        selData.map(async item => {\n          try {\n            const db = await rxDb();\n            const query = db[Collection.name].findOne().where(Primary).eq(item[Primary]);\n            await query.remove();\n          } catch (e) {\n            console.error(e);\n          }\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/auth/index.tsx"],"names":["React","useEffect","useState","useTheme","CommonTableDefaultProps","DefaultProps","CommonTable","CommonTableHead","tableIcons","rxSubscribe","Columns","Primary","Schema","Collection","Setting","ConfirmDialog","rxDb","dynamic","jsonViewStyles","Box","Button","useTranslation","DynamicReactJson","ssr","AuthInfoContainer","t","theme","data","setData","selData","setSelData","modalState","setModalState","open","title","msg","collection","name","sort","updated_at","callback","style","options","filtering","grouping","tooltip","icon","onClick","_evt","length","render","rowData","details","color","backgroundColor","bunadmin","iconColor","padding","str","JSON","parse","db","upsert","value","Date","now","map","item","query","findOne","where","eq","remove","e","console","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nimport { useTheme } from \"@material-ui/core/styles\"\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\"\n\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\"\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\"\nimport rxSubscribe from \"@/utils/database/rxSubscribe\"\nimport { Columns } from \"./columns\"\nimport { Primary, Schema } from \"./schema\"\nimport { Collection } from \"./collections\"\nimport { Collection as Setting } from \"../setting/collections\"\nimport ConfirmDialog from \"@/components/CommonDialog/ConfirmDialog\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport dynamic from \"next/dynamic\"\nimport jsonViewStyles from \"@/utils/styles/jsonViewStyles\"\nimport { Type } from \"./types\"\nimport { Box, Button } from \"@material-ui/core\"\nimport { useTranslation } from \"react-i18next\"\nconst DynamicReactJson = dynamic(import(\"react-json-view\"), { ssr: false })\n\nexport default function AuthInfoContainer() {\n  const { t } = useTranslation(\"table\")\n  const theme = useTheme()\n  const [data, setData] = useState([])\n  const [selData, setSelData] = useState<Type[]>()\n  const [modalState, setModalState] = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  })\n\n  useEffect(() => {\n    ;(async () => {\n      await rxSubscribe({\n        collection: Collection.name,\n        sort: { updated_at: \"desc\" },\n        callback: data => setData(data)\n      })\n    })()\n  }, [])\n\n  return (\n    <>\n      <>\n        <CommonTableHead title={t(Schema.title)} />\n        <CommonTable\n          title={t(Schema.title)}\n          columns={Columns({ t })}\n          data={data}\n          // style\n          style={DefaultProps.style}\n          // icons\n          icons={tableIcons({ theme })}\n          // options\n          options={{ ...DefaultProps.options, filtering: true, grouping: true }}\n          // actions\n          actions={[\n            {\n              tooltip: \"Remove All Selected Items\",\n              icon: \"delete\",\n              onClick: (_evt, data) => {\n                data = data as Type[]\n                const msg = \"Do you want to delete \" + data.length + \" rows ?\"\n                setModalState({\n                  title: \"Bulk delete\",\n                  open: modalState.open + 1,\n                  msg\n                })\n                setSelData(data)\n              }\n            }\n          ]}\n          // detailPanel\n          detailPanel={[\n            {\n              icon: \"assignment_ind\",\n              render: rowData => {\n                if (!rowData.details) {\n                  return (\n                    <div\n                      style={{\n                        color: \"white\",\n                        backgroundColor: theme.bunadmin.iconColor,\n                        padding: \"10px 30px\"\n                      }}\n                    >\n                      {rowData.details || \"DETAILS IS EMPTY\"}\n                    </div>\n                  )\n                } else {\n                  const str = rowData.details || \"\"\n                  return (\n                    <DynamicReactJson\n                      src={JSON.parse(str)}\n                      theme=\"summerfruit:inverted\"\n                      iconStyle=\"circle\"\n                      collapseStringsAfterLength={20}\n                      displayObjectSize={false}\n                      displayDataTypes={false}\n                      style={jsonViewStyles({ theme })}\n                    />\n                  )\n                } // check columns\n              } // render\n            }, // item\n            {\n              icon: \"sync_alt\",\n              render: rowData => {\n                return (\n                  <Box p={3}>\n                    <Button\n                      variant=\"outlined\"\n                      size=\"small\"\n                      color=\"primary\"\n                      onClick={async () => {\n                        const db = await rxDb()\n                        await db[Setting.name].upsert({\n                          name: Primary,\n                          value: rowData[Primary],\n                          updated_at: Date.now()\n                        })\n                      }}\n                    >\n                      Switch to {rowData[Primary]}\n                    </Button>\n                  </Box>\n                )\n              }\n            }\n          ]}\n        />\n      </>\n      {/* ConfirmDialog */}\n      <ConfirmDialog\n        openModal={modalState.open}\n        title={modalState.title}\n        msg={modalState.msg}\n        doFunc={() => {\n          // bulk delete\n          if (selData && selData.length > 0) {\n            selData.map(async item => {\n              try {\n                const db = await rxDb()\n\n                const query = db[Collection.name]\n                  .findOne()\n                  .where(Primary)\n                  .eq(item[Primary])\n\n                await query.remove()\n              } catch (e) {\n                console.error(e)\n              }\n            })\n          }\n        }}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}