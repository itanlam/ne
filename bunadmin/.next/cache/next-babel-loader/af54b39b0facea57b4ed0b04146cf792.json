{"ast":null,"code":"export function fsDownload(content, fileName, contentType) {\n  const a = document.createElement(\"a\");\n  const file = new Blob([JSON.stringify(content, null, 2)], {\n    type: contentType\n  });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n} // fsDownload(jsonData, 'json.txt', 'text/plain');\n\nexport async function fsUpload(e) {\n  var _e$target$files;\n\n  // File object\n  // const fileObj = JSON.parse(e.target.files?.[0])\n  const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n  const str = await readAsBinaryString(file);\n  return JSON.parse(str);\n}\n\nconst readAsBinaryString = inputFile => {\n  const temporaryFileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onerror = () => {\n      temporaryFileReader.abort();\n      reject(new DOMException(\"Problem parsing input file.\"));\n    };\n\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result);\n    }; // @ts-ignore\n\n\n    temporaryFileReader.readAsBinaryString(inputFile);\n  });\n};","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/scripts/fs.tsx"],"names":["fsDownload","content","fileName","contentType","a","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","fsUpload","e","target","files","str","readAsBinaryString","parse","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result"],"mappings":"AAEA,OAAO,SAASA,UAAT,CACLC,OADK,EAELC,QAFK,EAGLC,WAHK,EAIL;AACA,QAAMC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACC,IAAI,CAACC,SAAL,CAAeT,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAD,CAAT,EAA6C;AACxDU,IAAAA,IAAI,EAAER;AADkD,GAA7C,CAAb;AAGAC,EAAAA,CAAC,CAACQ,IAAF,GAASC,GAAG,CAACC,eAAJ,CAAoBP,IAApB,CAAT;AACAH,EAAAA,CAAC,CAACW,QAAF,GAAab,QAAb;AACAE,EAAAA,CAAC,CAACY,KAAF;AACD,C,CACD;;AAEA,OAAO,eAAeC,QAAf,CAAwBC,CAAxB,EAAgE;AAAA;;AACrE;AACA;AAEA,QAAMX,IAAI,sBAAGW,CAAC,CAACC,MAAF,CAASC,KAAZ,oDAAG,gBAAiB,CAAjB,CAAb;AACA,QAAMC,GAAG,GAAG,MAAMC,kBAAkB,CAACf,IAAD,CAApC;AAEA,SAAOE,IAAI,CAACc,KAAL,CAAWF,GAAX,CAAP;AACD;;AAED,MAAMC,kBAAkB,GAAIE,SAAD,IAAiC;AAC1D,QAAMC,mBAAmB,GAAG,IAAIC,UAAJ,EAA5B;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,mBAAmB,CAACK,OAApB,GAA8B,MAAM;AAClCL,MAAAA,mBAAmB,CAACM,KAApB;AACAF,MAAAA,MAAM,CAAC,IAAIG,YAAJ,CAAiB,6BAAjB,CAAD,CAAN;AACD,KAHD;;AAKAP,IAAAA,mBAAmB,CAACQ,MAApB,GAA6B,MAAM;AACjCL,MAAAA,OAAO,CAACH,mBAAmB,CAACS,MAArB,CAAP;AACD,KAFD,CANsC,CAStC;;;AACAT,IAAAA,mBAAmB,CAACH,kBAApB,CAAuCE,SAAvC;AACD,GAXM,CAAP;AAYD,CAfD","sourcesContent":["import React from \"react\"\n\nexport function fsDownload(\n  content: object | object[],\n  fileName: string,\n  contentType: string\n) {\n  const a = document.createElement(\"a\")\n  const file = new Blob([JSON.stringify(content, null, 2)], {\n    type: contentType\n  })\n  a.href = URL.createObjectURL(file)\n  a.download = fileName\n  a.click()\n}\n// fsDownload(jsonData, 'json.txt', 'text/plain');\n\nexport async function fsUpload(e: React.ChangeEvent<HTMLInputElement>) {\n  // File object\n  // const fileObj = JSON.parse(e.target.files?.[0])\n\n  const file = e.target.files?.[0]\n  const str = await readAsBinaryString(file)\n\n  return JSON.parse(str as string)\n}\n\nconst readAsBinaryString = (inputFile: File | undefined) => {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onerror = () => {\n      temporaryFileReader.abort()\n      reject(new DOMException(\"Problem parsing input file.\"))\n    }\n\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    // @ts-ignore\n    temporaryFileReader.readAsBinaryString(inputFile)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}