{"ast":null,"code":"import { Collection as Auth } from \"@/core/auth/collections\";\nimport { Collection as Setting } from \"@/core/setting/collections\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Primary } from \"@/core/auth/schema\";\nexport default async function storedToken() {\n  const authStore = Auth.name;\n  const setting = Setting.name;\n  const db = await rxDb(); // query username from bunadmin_setting\n\n  const settingRes = await db[setting].findOne().where(\"name\").eq(Primary).exec();\n  const username = settingRes && settingRes.value || \"\"; // query user from auth_store\n\n  const localUser = await db[authStore].findOne().where(Primary).eq(username).exec();\n  return localUser && localUser.token;\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/scripts/storedToken.tsx"],"names":["Collection","Auth","Setting","rxDb","Primary","storedToken","authStore","name","setting","db","settingRes","findOne","where","eq","exec","username","value","localUser","token"],"mappings":"AAAA,SAASA,UAAU,IAAIC,IAAvB,QAAmC,yBAAnC;AACA,SAASD,UAAU,IAAIE,OAAvB,QAAsC,4BAAtC;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,eAAe,eAAeC,WAAf,GAA6B;AAC1C,QAAMC,SAAS,GAAGL,IAAI,CAACM,IAAvB;AACA,QAAMC,OAAO,GAAGN,OAAO,CAACK,IAAxB;AACA,QAAME,EAAE,GAAG,MAAMN,IAAI,EAArB,CAH0C,CAK1C;;AACA,QAAMO,UAAU,GAAG,MAAMD,EAAE,CAACD,OAAD,CAAF,CACtBG,OADsB,GAEtBC,KAFsB,CAEhB,MAFgB,EAGtBC,EAHsB,CAGnBT,OAHmB,EAItBU,IAJsB,EAAzB;AAKA,QAAMC,QAAQ,GAAIL,UAAU,IAAIA,UAAU,CAACM,KAA1B,IAAoC,EAArD,CAX0C,CAa1C;;AACA,QAAMC,SAAS,GAAG,MAAMR,EAAE,CAACH,SAAD,CAAF,CACrBK,OADqB,GAErBC,KAFqB,CAEfR,OAFe,EAGrBS,EAHqB,CAGlBE,QAHkB,EAIrBD,IAJqB,EAAxB;AAMA,SAAOG,SAAS,IAAIA,SAAS,CAACC,KAA9B;AACD","sourcesContent":["import { Collection as Auth } from \"@/core/auth/collections\"\nimport { Collection as Setting } from \"@/core/setting/collections\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Primary } from \"@/core/auth/schema\"\n\nexport default async function storedToken() {\n  const authStore = Auth.name\n  const setting = Setting.name\n  const db = await rxDb()\n\n  // query username from bunadmin_setting\n  const settingRes = await db[setting]\n    .findOne()\n    .where(\"name\")\n    .eq(Primary)\n    .exec()\n  const username = (settingRes && settingRes.value) || \"\"\n\n  // query user from auth_store\n  const localUser = await db[authStore]\n    .findOne()\n    .where(Primary)\n    .eq(username)\n    .exec()\n\n  return localUser && localUser.token\n}\n"]},"metadata":{},"sourceType":"module"}