{"ast":null,"code":"export default async function rxInitData({\n  db,\n  collection,\n  name,\n  initFunc\n}) {\n  const setting = db[collection];\n  const is_init = await setting.findOne({\n    name: {\n      $eq: name\n    }\n  }).exec();\n\n  if (is_init) {\n    /**\n     * !!!DEBUG ONLY\n     * Initialize data every refresh\n     */\n    // await setting.remove()\n    return console.log(`DatabaseService: ${name} already exists`);\n  } else {\n    await initFunc(); // set init status\n\n    await setting.upsert({\n      name: name,\n      value: \"done\"\n    });\n    console.log(`DatabaseService: ${name} done`);\n    return location.reload();\n  }\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/database/rxInitData/index.tsx"],"names":["rxInitData","db","collection","name","initFunc","setting","is_init","findOne","$eq","exec","console","log","upsert","value","location","reload"],"mappings":"AASA,eAAe,eAAeA,UAAf,CAA0B;AACvCC,EAAAA,EADuC;AAEvCC,EAAAA,UAFuC;AAGvCC,EAAAA,IAHuC;AAIvCC,EAAAA;AAJuC,CAA1B,EAKL;AACR,QAAMC,OAAO,GAAGJ,EAAE,CAACC,UAAD,CAAlB;AACA,QAAMI,OAAO,GAAG,MAAMD,OAAO,CAACE,OAAR,CAAgB;AAAEJ,IAAAA,IAAI,EAAE;AAAEK,MAAAA,GAAG,EAAEL;AAAP;AAAR,GAAhB,EAAyCM,IAAzC,EAAtB;;AAEA,MAAIH,OAAJ,EAAa;AACX;;;;AAIA;AAEA,WAAOI,OAAO,CAACC,GAAR,CAAa,oBAAmBR,IAAK,iBAArC,CAAP;AACD,GARD,MAQO;AACL,UAAMC,QAAQ,EAAd,CADK,CAGL;;AACA,UAAMC,OAAO,CAACO,MAAR,CAAe;AACnBT,MAAAA,IAAI,EAAEA,IADa;AAEnBU,MAAAA,KAAK,EAAE;AAFY,KAAf,CAAN;AAKAH,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBR,IAAK,OAArC;AAEA,WAAOW,QAAQ,CAACC,MAAT,EAAP;AACD;AACF","sourcesContent":["import { RxDatabase } from \"rxdb/dist/typings/types\"\n\ninterface Props {\n  db: RxDatabase<any>\n  collection: string\n  name: string\n  initFunc: () => Promise<void>\n}\n\nexport default async function rxInitData({\n  db,\n  collection,\n  name,\n  initFunc\n}: Props) {\n  const setting = db[collection]\n  const is_init = await setting.findOne({ name: { $eq: name } }).exec()\n\n  if (is_init) {\n    /**\n     * !!!DEBUG ONLY\n     * Initialize data every refresh\n     */\n    // await setting.remove()\n\n    return console.log(`DatabaseService: ${name} already exists`)\n  } else {\n    await initFunc()\n\n    // set init status\n    await setting.upsert({\n      name: name,\n      value: \"done\"\n    })\n\n    console.log(`DatabaseService: ${name} done`)\n\n    return location.reload()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}