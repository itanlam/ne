{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport RxDB from \"rxdb\";\nimport { rxCollections } from \"./rxCollections\";\nRxDB.plugin(require(\"pouchdb-adapter-idb\"));\nRxDB.plugin(require(\"pouchdb-adapter-http\")); //enable syncing over http\n\nvar dbPromise = false;\n\nvar _create = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return RxDB.create({\n              name: \"bunadmin\",\n              // <- name\n              adapter: \"idb\",\n              // <- storage-adapter\n              password: \"JUUFblX8pY9BeBs9RF68N7n\",\n              // <- password (optional)\n              multiInstance: true,\n              // <- multiInstance (optional, default: true)\n              queryChangeDetection: false,\n              // <- queryChangeDetection (optional, default: false)\n              ignoreDuplicate: true\n            });\n\n          case 2:\n            db = _context.sent;\n            console.log(\"DatabaseService: created database\"); // show flash icon in title\n\n            db.waitForLeadership().then(function () {\n              console.log(\"isLeader now\");\n              document.title = \"⚡\" + document.title;\n            }); // create collections\n\n            _context.next = 7;\n            return Promise.all(rxCollections.map(function (collObj) {\n              return db.collection(collObj);\n            }));\n\n          case 7:\n            console.log(\"DatabaseService: create collections\");\n            return _context.abrupt(\"return\", db);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function _create() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function rxDb() {\n  if (!dbPromise) dbPromise = _create();\n  return dbPromise;\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/database/rxConnect.tsx"],"names":["RxDB","rxCollections","plugin","require","dbPromise","_create","create","name","adapter","password","multiInstance","queryChangeDetection","ignoreDuplicate","db","console","log","waitForLeadership","then","document","title","Promise","all","map","collObj","collection","rxDb"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAGAD,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,qBAAD,CAAnB;AACAH,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,sBAAD,CAAnB,E,CAA6C;;AAE7C,IAAIC,SAAS,GAAG,KAAhB;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGL,IAAI,CAACM,MAAL,CAAY;AAC3BC,cAAAA,IAAI,EAAE,UADqB;AACT;AAClBC,cAAAA,OAAO,EAAE,KAFkB;AAEX;AAChBC,cAAAA,QAAQ,EAAE,yBAHiB;AAGU;AACrCC,cAAAA,aAAa,EAAE,IAJY;AAIN;AACrBC,cAAAA,oBAAoB,EAAE,KALK;AAKE;AAC7BC,cAAAA,eAAe,EAAE;AANU,aAAZ,CADH;;AAAA;AACRC,YAAAA,EADQ;AASdC,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EATc,CAWd;;AACAF,YAAAA,EAAE,CAACG,iBAAH,GAAuBC,IAAvB,CAA4B,YAAM;AAChCH,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAG,cAAAA,QAAQ,CAACC,KAAT,GAAiB,MAAMD,QAAQ,CAACC,KAAhC;AACD,aAHD,EAZc,CAiBd;;AAjBc;AAAA,mBAkBRC,OAAO,CAACC,GAAR,CAAYpB,aAAa,CAACqB,GAAd,CAAkB,UAAAC,OAAO;AAAA,qBAAIV,EAAE,CAACW,UAAH,CAAcD,OAAd,CAAJ;AAAA,aAAzB,CAAZ,CAlBQ;;AAAA;AAmBdT,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAnBc,6CAqBPF,EArBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPR,OAAO;AAAA;AAAA;AAAA,GAAb;;AAwBA,eAAe,SAASoB,IAAT,GAAgB;AAC7B,MAAI,CAACrB,SAAL,EAAgBA,SAAS,GAAGC,OAAO,EAAnB;AAChB,SAAOD,SAAP;AACD","sourcesContent":["import RxDB from \"rxdb\"\nimport { rxCollections } from \"./rxCollections\"\nimport { RxDatabase } from \"rxdb/dist/typings/types\"\n\nRxDB.plugin(require(\"pouchdb-adapter-idb\"))\nRxDB.plugin(require(\"pouchdb-adapter-http\")) //enable syncing over http\n\nlet dbPromise = false as boolean | Promise<RxDatabase<any>>\n\nconst _create = async () => {\n  const db = await RxDB.create({\n    name: \"bunadmin\", // <- name\n    adapter: \"idb\", // <- storage-adapter\n    password: \"JUUFblX8pY9BeBs9RF68N7n\", // <- password (optional)\n    multiInstance: true, // <- multiInstance (optional, default: true)\n    queryChangeDetection: false, // <- queryChangeDetection (optional, default: false)\n    ignoreDuplicate: true\n  })\n  console.log(\"DatabaseService: created database\")\n\n  // show flash icon in title\n  db.waitForLeadership().then(() => {\n    console.log(\"isLeader now\")\n    document.title = \"⚡\" + document.title\n  })\n\n  // create collections\n  await Promise.all(rxCollections.map(collObj => db.collection(collObj)))\n  console.log(\"DatabaseService: create collections\")\n\n  return db\n}\n\nexport default function rxDb() {\n  if (!dbPromise) dbPromise = _create()\n  return dbPromise\n}\n"]},"metadata":{},"sourceType":"module"}