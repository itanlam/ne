{"ast":null,"code":"var _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/schema/columns.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport EditColumns from \"./components/EditColumns\";\nexport const Columns = ({\n  t\n}) => [{\n  title: t(\"Id\"),\n  field: \"id\",\n  editable: \"onAdd\",\n  grouping: false\n}, {\n  title: t(\"Team\"),\n  field: \"team\",\n  defaultGroupOrder: 0\n}, {\n  title: t(\"Group\"),\n  field: \"group\",\n  defaultGroupOrder: 1\n}, {\n  title: t(\"Name\"),\n  field: \"name\",\n  grouping: false\n}, {\n  title: t(\"Label\"),\n  field: \"label\",\n  grouping: false\n}, {\n  title: t(\"Customized\"),\n  field: \"customized\",\n  lookup: {\n    true: \"True\",\n    false: \"False\"\n  }\n}, {\n  title: t(\"Created At\"),\n  field: \"created_at\",\n  editable: \"never\",\n  grouping: false,\n  render: r => __jsx(React.Fragment, null, r && new Date(r.created_at).toLocaleString())\n}, {\n  title: t(\"Updated At\"),\n  field: \"updated_at\",\n  editable: \"never\",\n  grouping: false,\n  render: r => __jsx(React.Fragment, null, r ? new Date(r.updated_at).toLocaleString() : \"\")\n}, {\n  title: t(\"Columns\"),\n  field: \"columns\",\n  grouping: false,\n  editComponent: props => __jsx(EditColumns, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  })),\n  render: r => __jsx(React.Fragment, null, r && r.columns ? \"...\" : \"EMPTY\")\n}];","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/schema/columns.tsx"],"names":["React","EditColumns","Columns","t","title","field","editable","grouping","defaultGroupOrder","lookup","true","false","render","r","Date","created_at","toLocaleString","updated_at","editComponent","props","columns"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgC,CACrD;AAAEC,EAAAA,KAAK,EAAED,CAAC,CAAC,IAAD,CAAV;AAAkBE,EAAAA,KAAK,EAAE,IAAzB;AAA+BC,EAAAA,QAAQ,EAAE,OAAzC;AAAkDC,EAAAA,QAAQ,EAAE;AAA5D,CADqD,EAErD;AAAEH,EAAAA,KAAK,EAAED,CAAC,CAAC,MAAD,CAAV;AAAoBE,EAAAA,KAAK,EAAE,MAA3B;AAAmCG,EAAAA,iBAAiB,EAAE;AAAtD,CAFqD,EAGrD;AAAEJ,EAAAA,KAAK,EAAED,CAAC,CAAC,OAAD,CAAV;AAAqBE,EAAAA,KAAK,EAAE,OAA5B;AAAqCG,EAAAA,iBAAiB,EAAE;AAAxD,CAHqD,EAIrD;AAAEJ,EAAAA,KAAK,EAAED,CAAC,CAAC,MAAD,CAAV;AAAoBE,EAAAA,KAAK,EAAE,MAA3B;AAAmCE,EAAAA,QAAQ,EAAE;AAA7C,CAJqD,EAKrD;AAAEH,EAAAA,KAAK,EAAED,CAAC,CAAC,OAAD,CAAV;AAAqBE,EAAAA,KAAK,EAAE,OAA5B;AAAqCE,EAAAA,QAAQ,EAAE;AAA/C,CALqD,EAMrD;AACEH,EAAAA,KAAK,EAAED,CAAC,CAAC,YAAD,CADV;AAEEE,EAAAA,KAAK,EAAE,YAFT;AAGEI,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB;AAHV,CANqD,EAWrD;AACEP,EAAAA,KAAK,EAAED,CAAC,CAAC,YAAD,CADV;AAEEE,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,QAAQ,EAAE,OAHZ;AAIEC,EAAAA,QAAQ,EAAE,KAJZ;AAKEK,EAAAA,MAAM,EAAEC,CAAC,IAAI,4BAAGA,CAAC,IAAI,IAAIC,IAAJ,CAASD,CAAC,CAACE,UAAX,EAAuBC,cAAvB,EAAR;AALf,CAXqD,EAkBrD;AACEZ,EAAAA,KAAK,EAAED,CAAC,CAAC,YAAD,CADV;AAEEE,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,QAAQ,EAAE,OAHZ;AAIEC,EAAAA,QAAQ,EAAE,KAJZ;AAKEK,EAAAA,MAAM,EAAEC,CAAC,IAAI,4BAAGA,CAAC,GAAG,IAAIC,IAAJ,CAASD,CAAC,CAACI,UAAX,EAAuBD,cAAvB,EAAH,GAA6C,EAAjD;AALf,CAlBqD,EAyBrD;AACEZ,EAAAA,KAAK,EAAED,CAAC,CAAC,SAAD,CADV;AAEEE,EAAAA,KAAK,EAAE,SAFT;AAGEE,EAAAA,QAAQ,EAAE,KAHZ;AAIEW,EAAAA,aAAa,EAAEC,KAAK,IAAI,MAAC,WAAD,eAAiBA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJ1B;AAKEP,EAAAA,MAAM,EAAEC,CAAC,IAAI,4BAAGA,CAAC,IAAIA,CAAC,CAACO,OAAP,GAAiB,KAAjB,GAAyB,OAA5B;AALf,CAzBqD,CAAhD","sourcesContent":["import React from \"react\"\n\nimport { Column } from \"material-table\"\nimport { Type } from \"./types\"\nimport EditColumns from \"./components/EditColumns\"\n\nexport const Columns = ({ t }: any): Column<Type>[] => [\n  { title: t(\"Id\"), field: \"id\", editable: \"onAdd\", grouping: false },\n  { title: t(\"Team\"), field: \"team\", defaultGroupOrder: 0 },\n  { title: t(\"Group\"), field: \"group\", defaultGroupOrder: 1 },\n  { title: t(\"Name\"), field: \"name\", grouping: false },\n  { title: t(\"Label\"), field: \"label\", grouping: false },\n  {\n    title: t(\"Customized\"),\n    field: \"customized\",\n    lookup: { true: \"True\", false: \"False\" }\n  },\n  {\n    title: t(\"Created At\"),\n    field: \"created_at\",\n    editable: \"never\",\n    grouping: false,\n    render: r => <>{r && new Date(r.created_at).toLocaleString()}</>\n  },\n  {\n    title: t(\"Updated At\"),\n    field: \"updated_at\",\n    editable: \"never\",\n    grouping: false,\n    render: r => <>{r ? new Date(r.updated_at).toLocaleString() : \"\"}</>\n  },\n  {\n    title: t(\"Columns\"),\n    field: \"columns\",\n    grouping: false,\n    editComponent: props => <EditColumns {...props} />,\n    render: r => <>{r && r.columns ? \"...\" : \"EMPTY\"}</>\n  }\n]\n"]},"metadata":{},"sourceType":"module"}