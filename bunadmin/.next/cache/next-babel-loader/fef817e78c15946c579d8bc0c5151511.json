{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSchema/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"@/core/schema/collections\";\nimport CommonTable, { CommonTableHead } from \"../CommonTable\";\nimport { editableController } from \"./controllers/editableController\";\nimport { CommonTableDefaultProps as DefaultProps } from \"../CommonTable/models/defaultProps\";\nimport tableIcons from \"../CommonTable/models/tableIcons\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Plugins from \"../Plugins\";\nimport CommonError from \"../CommonError\";\nimport { LocalDataRoute } from \"@/utils/routes\";\nimport dataController from \"@/components/CommonSchema/controllers/dataController\";\nimport columnsController from \"@/components/CommonSchema/controllers/columnsController\";\nimport TableSkeleton from \"@/components/CommonTable/components/TableSkeleton\";\nimport { useTranslation } from \"react-i18next\";\nexport default function CommonSchema(_ref) {\n  _s();\n\n  var isAuthPath = _ref.isAuthPath;\n\n  var _useTranslation = useTranslation(\"table\"),\n      t = _useTranslation.t;\n\n  var theme = useTheme();\n  var router = useRouter();\n  var _ref2 = router.query,\n      group = _ref2.group,\n      name = _ref2.name;\n\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState({}),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _ref3 = state,\n      schema = _ref3.schema,\n      _data = _ref3.data,\n      notFound = _ref3.notFound;\n  var Schema = Collection.name;\n  useEffect(function () {\n    if (!group || !name) return;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var db;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return rxDb();\n\n            case 2:\n              db = _context.sent;\n              db[Schema].find().exec().then(function (schemas) {\n                // local_database schemas not existed\n                if (!schemas) return setState({\n                  notFound: true\n                });\n                var current = schemas.filter(function (item) {\n                  return item.group === group && item.name === name;\n                }); // current schema not existed\n\n                if (!current[0]) return setState({\n                  notFound: true\n                }); // loop handing columns\n\n                var columns = JSON.parse(current[0].columns);\n                columns = columnsController({\n                  t: t,\n                  columns: columns\n                });\n\n                var schema = _objectSpread(_objectSpread({}, current[0]), {}, {\n                  columns: columns\n                });\n\n                setState({\n                  schema: schema,\n                  data: current[0]\n                });\n                setReady(true);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, [name]);\n  if (notFound) return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(CommonError, {\n    statusCode: 404,\n    hasLayout: false,\n    message: \"The schema does not existed, you can add it using Schema Manager.\",\n    redirect: LocalDataRoute.schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })); // handle auth path START\n\n  if (!ready && isAuthPath) return null;\n\n  if (ready && isAuthPath) {\n    // When the auth path does not exist in the plugin, a blank page will be rendered\n    return __jsx(Plugins, {\n      team: _data.team,\n      group: _data.group,\n      name: _data.name,\n      hideLoading: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    });\n  } // handle user path END\n\n\n  if (!ready) return __jsx(TableSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 22\n    }\n  }); // Check customized\n\n  if (_data.customized) {\n    return __jsx(Plugins, {\n      team: _data.team,\n      group: _data.group,\n      name: _data.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var title = _data.label && t(_data.label) || t(name);\n  return __jsx(React.Fragment, null, __jsx(CommonTableHead, {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(CommonTable, {\n    title: title,\n    columns: schema.columns,\n    editable: editableController() // style\n    ,\n    style: DefaultProps.style // icons\n    ,\n    icons: tableIcons({\n      theme: theme\n    }) // options\n    ,\n    options: _objectSpread(_objectSpread({}, DefaultProps.options), {}, {\n      filtering: true\n    }) // data\n    ,\n    data: function data(query) {\n      return dataController({\n        query: query,\n        name: _data.name\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(CommonSchema, \"ofFaYk9kxuL70+NOmbuyUsTGRP8=\", false, function () {\n  return [useTranslation, useTheme, useRouter];\n});\n\n_c = CommonSchema;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommonSchema\");","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSchema/index.tsx"],"names":["React","useEffect","useState","useRouter","rxDb","Collection","CommonTable","CommonTableHead","editableController","CommonTableDefaultProps","DefaultProps","tableIcons","useTheme","Plugins","CommonError","LocalDataRoute","dataController","columnsController","TableSkeleton","useTranslation","CommonSchema","isAuthPath","t","theme","router","query","group","name","ready","setReady","state","setState","schema","data","notFound","Schema","db","find","exec","then","schemas","current","filter","item","columns","JSON","parse","display","team","customized","title","label","style","options","filtering"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { useRouter } from \"next/router\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Collection } from \"@/core/schema/collections\"\nimport CommonTable, { CommonTableHead } from \"../CommonTable\"\nimport { Column } from \"material-table\"\nimport { editableController } from \"./controllers/editableController\"\nimport { CommonTableDefaultProps as DefaultProps } from \"../CommonTable/models/defaultProps\"\nimport tableIcons from \"../CommonTable/models/tableIcons\"\nimport { Type } from \"@/core/schema/types\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport Plugins from \"../Plugins\"\nimport CommonError from \"../CommonError\"\nimport { LocalDataRoute } from \"@/utils/routes\"\nimport dataController from \"@/components/CommonSchema/controllers/dataController\"\nimport columnsController from \"@/components/CommonSchema/controllers/columnsController\"\nimport TableSkeleton from \"@/components/CommonTable/components/TableSkeleton\"\nimport { useTranslation } from \"react-i18next\"\n\ninterface Interface {\n  group: string\n  name: string\n}\n\ninterface StateSchemaType {\n  schema: Type\n  data: Type\n  notFound: boolean\n}\n\ninterface Props {\n  isAuthPath?: boolean\n}\n\nexport default function CommonSchema({ isAuthPath }: Props) {\n  const { t } = useTranslation(\"table\")\n  const theme = useTheme()\n  const router = useRouter()\n  const { group, name } = (router.query as unknown) as Interface\n  const [ready, setReady] = useState(false)\n  const [state, setState] = useState({})\n  const { schema, data, notFound } = state as StateSchemaType\n  const Schema = Collection.name\n\n  useEffect(() => {\n    if (!group || !name) return\n    ;(async () => {\n      const db = await rxDb()\n      db[Schema].find()\n        .exec()\n        .then((schemas: any) => {\n          // local_database schemas not existed\n          if (!schemas) return setState({ notFound: true })\n          const current = schemas.filter(\n            (item: Interface) => item.group === group && item.name === name\n          )\n\n          // current schema not existed\n          if (!current[0]) return setState({ notFound: true })\n\n          // loop handing columns\n          let columns = JSON.parse(current[0].columns as string)\n          columns = columnsController({ t, columns })\n          const schema = { ...current[0], columns }\n\n          setState({ schema, data: current[0] })\n          setReady(true)\n        })\n    })()\n  }, [name])\n\n  if (notFound)\n    return (\n      <div style={{ display: \"flex\" }}>\n        <CommonError\n          statusCode={404}\n          hasLayout={false}\n          message={\n            \"The schema does not existed, you can add it using Schema Manager.\"\n          }\n          redirect={LocalDataRoute.schema}\n        />\n      </div>\n    )\n\n  // handle auth path START\n  if (!ready && isAuthPath) return null\n\n  if (ready && isAuthPath) {\n    // When the auth path does not exist in the plugin, a blank page will be rendered\n    return (\n      <Plugins\n        team={data.team}\n        group={data.group}\n        name={data.name}\n        hideLoading={true}\n      />\n    )\n  }\n  // handle user path END\n\n  if (!ready) return <TableSkeleton />\n\n  // Check customized\n  if (data.customized) {\n    return <Plugins team={data.team} group={data.group} name={data.name} />\n  }\n\n  const title = (data.label && t(data.label)) || t(name)\n\n  return (\n    <>\n      <CommonTableHead title={title} />\n      <CommonTable\n        title={title}\n        columns={(schema.columns as unknown) as Column<any>[]}\n        editable={editableController()}\n        // style\n        style={DefaultProps.style}\n        // icons\n        icons={tableIcons({ theme })}\n        // options\n        options={{ ...DefaultProps.options, filtering: true }}\n        // data\n        data={query => dataController({ query, name: data.name })}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}