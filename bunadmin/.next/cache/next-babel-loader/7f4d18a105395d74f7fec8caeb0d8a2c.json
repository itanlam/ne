{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport request from \"@/utils/scripts/request\";\nimport storedToken from \"@/utils/scripts/storedToken\";\nimport { ENV } from \"@/utils/config\";\nimport { notice } from \"@/core\";\nexport default function deleteSer(_x) {\n  return _deleteSer.apply(this, arguments);\n}\n\nfunction _deleteSer() {\n  _deleteSer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var oldData, SchemaName, token, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            oldData = _ref.oldData, SchemaName = _ref.SchemaName;\n            _context.next = 3;\n            return storedToken();\n\n          case 3:\n            token = _context.sent;\n            _context.next = 6;\n            return request(\"/content-manager/explorer/application::\".concat(SchemaName, \".\").concat(SchemaName, \"/\").concat(oldData.id), {\n              prefix: ENV.MAIN_URL,\n              method: \"DELETE\",\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 6:\n            res = _context.sent;\n\n            if (!res.error) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 10;\n            return notice({\n              title: \"Sorry, you can't delete this item\",\n              severity: \"warning\",\n              content: JSON.stringify(oldData)\n            });\n\n          case 10:\n            _context.next = 14;\n            break;\n\n          case 12:\n            _context.next = 14;\n            return notice({\n              title: \"Successful\",\n              severity: \"success\"\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _deleteSer.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/services/deleteSer.tsx"],"names":["request","storedToken","ENV","notice","deleteSer","oldData","SchemaName","token","id","prefix","MAIN_URL","method","headers","Authorization","res","error","title","severity","content","JSON","stringify"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAOA,wBAA8BC,SAA9B;AAAA;AAAA;;;wEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2BC,YAAAA,OAA3B,QAA2BA,OAA3B,EAAoCC,UAApC,QAAoCA,UAApC;AAAA;AAAA,mBACOL,WAAW,EADlB;;AAAA;AACPM,YAAAA,KADO;AAAA;AAAA,mBAGKP,OAAO,kDACmBM,UADnB,cACiCA,UADjC,cAC+CD,OAAO,CAACG,EADvD,GAEvB;AACEC,cAAAA,MAAM,EAAEP,GAAG,CAACQ,QADd;AAEEC,cAAAA,MAAM,EAAE,QAFV;AAGEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,mBAAYN,KAAZ;AADN;AAHX,aAFuB,CAHZ;;AAAA;AAGPO,YAAAA,GAHO;;AAAA,iBAcTA,GAAG,CAACC,KAdK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAeLZ,MAAM,CAAC;AACXa,cAAAA,KAAK,EAAE,mCADI;AAEXC,cAAAA,QAAQ,EAAE,SAFC;AAGXC,cAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAef,OAAf;AAHE,aAAD,CAfD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAqBLF,MAAM,CAAC;AACXa,cAAAA,KAAK,EAAE,YADI;AAEXC,cAAAA,QAAQ,EAAE;AAFC,aAAD,CArBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import request from \"@/utils/scripts/request\"\nimport storedToken from \"@/utils/scripts/storedToken\"\nimport { ENV } from \"@/utils/config\"\nimport { notice } from \"@/core\"\nimport { EditableCtrl } from \"../types\"\n\ninterface Props<RowData> extends EditableCtrl {\n  oldData: RowData\n}\n\nexport default async function deleteSer({ oldData, SchemaName }: Props<any>) {\n  const token = await storedToken()\n\n  const res = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}/${oldData.id}`,\n    {\n      prefix: ENV.MAIN_URL,\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  if (res.error) {\n    await notice({\n      title: \"Sorry, you can't delete this item\",\n      severity: \"warning\",\n      content: JSON.stringify(oldData)\n    })\n  } else {\n    await notice({\n      title: \"Successful\",\n      severity: \"success\"\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}