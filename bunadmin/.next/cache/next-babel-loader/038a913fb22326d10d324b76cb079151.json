{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport updateSer from \"../services/updateSer\";\nimport deleteSer from \"../services/deleteSer\";\nimport addSer from \"../services/addSer\";\n\nfunction editableCtrl(_ref) {\n  var SchemaName = _ref.SchemaName;\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: function () {\n      var _onRowAdd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newData) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return addSer({\n                  newData: newData,\n                  SchemaName: SchemaName\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onRowAdd(_x) {\n        return _onRowAdd.apply(this, arguments);\n      }\n\n      return onRowAdd;\n    }(),\n    onRowUpdate: function () {\n      var _onRowUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newData, oldData) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return updateSer({\n                  newData: newData,\n                  oldData: oldData,\n                  SchemaName: SchemaName\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function onRowUpdate(_x2, _x3) {\n        return _onRowUpdate.apply(this, arguments);\n      }\n\n      return onRowUpdate;\n    }(),\n    onRowDelete: function onRowDelete(oldData) {\n      return deleteSer({\n        oldData: oldData,\n        SchemaName: SchemaName\n      });\n    }\n  };\n}\n\nexport default editableCtrl;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/controllers/editableCtrl.tsx"],"names":["updateSer","deleteSer","addSer","editableCtrl","SchemaName","onRowAdd","newData","onRowUpdate","oldData","onRowDelete"],"mappings":";;AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,SAASC,YAAT,OAA2E;AAAA,MAAnDC,UAAmD,QAAnDA,UAAmD;AACzE,SAAO;AACL;AACA;AACAC,IAAAA,QAAQ;AAAA,+EAAE,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAuBJ,MAAM,CAAC;AAAEI,kBAAAA,OAAO,EAAPA,OAAF;AAAWF,kBAAAA,UAAU,EAAVA;AAAX,iBAAD,CAA7B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAHH;AAILG,IAAAA,WAAW;AAAA,kFAAE,kBAAOD,OAAP,EAAgBE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACLR,SAAS,CAAC;AAAEM,kBAAAA,OAAO,EAAPA,OAAF;AAAWE,kBAAAA,OAAO,EAAPA,OAAX;AAAoBJ,kBAAAA,UAAU,EAAVA;AAApB,iBAAD,CADJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAJN;AAMLK,IAAAA,WAAW,EAAE,qBAAAD,OAAO;AAAA,aAAIP,SAAS,CAAC;AAAEO,QAAAA,OAAO,EAAPA,OAAF;AAAWJ,QAAAA,UAAU,EAAVA;AAAX,OAAD,CAAb;AAAA;AANf,GAAP;AAQD;;AAED,eAAeD,YAAf","sourcesContent":["import { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport updateSer from \"../services/updateSer\"\nimport deleteSer from \"../services/deleteSer\"\nimport addSer from \"../services/addSer\"\nimport { EditableCtrl } from \"../types\"\n\nfunction editableCtrl({ SchemaName }: EditableCtrl): EditableDataType<any> {\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: async newData => await addSer({ newData, SchemaName }),\n    onRowUpdate: async (newData, oldData) =>\n      await updateSer({ newData, oldData, SchemaName }),\n    onRowDelete: oldData => deleteSer({ oldData, SchemaName })\n  }\n}\n\nexport default editableCtrl\n"]},"metadata":{},"sourceType":"module"}