{"ast":null,"code":"var _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSchema/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"@/core/schema/collections\";\nimport CommonTable, { CommonTableHead } from \"../CommonTable\";\nimport { editableController } from \"./controllers/editableController\";\nimport { CommonTableDefaultProps as DefaultProps } from \"../CommonTable/models/defaultProps\";\nimport tableIcons from \"../CommonTable/models/tableIcons\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Plugins from \"../Plugins\";\nimport CommonError from \"../CommonError\";\nimport { LocalDataRoute } from \"@/utils/routes\";\nimport dataController from \"@/components/CommonSchema/controllers/dataController\";\nimport columnsController from \"@/components/CommonSchema/controllers/columnsController\";\nimport TableSkeleton from \"@/components/CommonTable/components/TableSkeleton\";\nimport { useTranslation } from \"react-i18next\";\nexport default function CommonSchema({\n  isAuthPath\n}) {\n  const {\n    t\n  } = useTranslation(\"table\");\n  const theme = useTheme();\n  const router = useRouter();\n  const {\n    group,\n    name\n  } = router.query;\n  const {\n    0: ready,\n    1: setReady\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  const {\n    schema,\n    data,\n    notFound\n  } = state;\n  const Schema = Collection.name;\n  useEffect(() => {\n    if (!group || !name) return;\n\n    (async () => {\n      const db = await rxDb();\n      db[Schema].find().exec().then(schemas => {\n        // local_database schemas not existed\n        if (!schemas) return setState({\n          notFound: true\n        });\n        const current = schemas.filter(item => item.group === group && item.name === name); // current schema not existed\n\n        if (!current[0]) return setState({\n          notFound: true\n        }); // loop handing columns\n\n        let columns = JSON.parse(current[0].columns);\n        columns = columnsController({\n          t,\n          columns\n        });\n\n        const schema = _objectSpread(_objectSpread({}, current[0]), {}, {\n          columns\n        });\n\n        setState({\n          schema,\n          data: current[0]\n        });\n        setReady(true);\n      });\n    })();\n  }, [name]);\n  if (notFound) return __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(CommonError, {\n    statusCode: 404,\n    hasLayout: false,\n    message: \"The schema does not existed, you can add it using Schema Manager.\",\n    redirect: LocalDataRoute.schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })); // handle auth path START\n\n  if (!ready && isAuthPath) return null;\n\n  if (ready && isAuthPath) {\n    // When the auth path does not exist in the plugin, a blank page will be rendered\n    return __jsx(Plugins, {\n      team: data.team,\n      group: data.group,\n      name: data.name,\n      hideLoading: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    });\n  } // handle user path END\n\n\n  if (!ready) return __jsx(TableSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 22\n    }\n  }); // Check customized\n\n  if (data.customized) {\n    return __jsx(Plugins, {\n      team: data.team,\n      group: data.group,\n      name: data.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const title = data.label && t(data.label) || t(name);\n  return __jsx(React.Fragment, null, __jsx(CommonTableHead, {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(CommonTable, {\n    title: title,\n    columns: schema.columns,\n    editable: editableController() // style\n    ,\n    style: DefaultProps.style // icons\n    ,\n    icons: tableIcons({\n      theme\n    }) // options\n    ,\n    options: _objectSpread(_objectSpread({}, DefaultProps.options), {}, {\n      filtering: true\n    }) // data\n    ,\n    data: query => dataController({\n      query,\n      name: data.name\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSchema/index.tsx"],"names":["React","useEffect","useState","useRouter","rxDb","Collection","CommonTable","CommonTableHead","editableController","CommonTableDefaultProps","DefaultProps","tableIcons","useTheme","Plugins","CommonError","LocalDataRoute","dataController","columnsController","TableSkeleton","useTranslation","CommonSchema","isAuthPath","t","theme","router","group","name","query","ready","setReady","state","setState","schema","data","notFound","Schema","db","find","exec","then","schemas","current","filter","item","columns","JSON","parse","display","team","customized","title","label","style","options","filtering"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { useRouter } from \"next/router\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Collection } from \"@/core/schema/collections\"\nimport CommonTable, { CommonTableHead } from \"../CommonTable\"\nimport { Column } from \"material-table\"\nimport { editableController } from \"./controllers/editableController\"\nimport { CommonTableDefaultProps as DefaultProps } from \"../CommonTable/models/defaultProps\"\nimport tableIcons from \"../CommonTable/models/tableIcons\"\nimport { Type } from \"@/core/schema/types\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport Plugins from \"../Plugins\"\nimport CommonError from \"../CommonError\"\nimport { LocalDataRoute } from \"@/utils/routes\"\nimport dataController from \"@/components/CommonSchema/controllers/dataController\"\nimport columnsController from \"@/components/CommonSchema/controllers/columnsController\"\nimport TableSkeleton from \"@/components/CommonTable/components/TableSkeleton\"\nimport { useTranslation } from \"react-i18next\"\n\ninterface Interface {\n  group: string\n  name: string\n}\n\ninterface StateSchemaType {\n  schema: Type\n  data: Type\n  notFound: boolean\n}\n\ninterface Props {\n  isAuthPath?: boolean\n}\n\nexport default function CommonSchema({ isAuthPath }: Props) {\n  const { t } = useTranslation(\"table\")\n  const theme = useTheme()\n  const router = useRouter()\n  const { group, name } = (router.query as unknown) as Interface\n  const [ready, setReady] = useState(false)\n  const [state, setState] = useState({})\n  const { schema, data, notFound } = state as StateSchemaType\n  const Schema = Collection.name\n\n  useEffect(() => {\n    if (!group || !name) return\n    ;(async () => {\n      const db = await rxDb()\n      db[Schema].find()\n        .exec()\n        .then((schemas: any) => {\n          // local_database schemas not existed\n          if (!schemas) return setState({ notFound: true })\n          const current = schemas.filter(\n            (item: Interface) => item.group === group && item.name === name\n          )\n\n          // current schema not existed\n          if (!current[0]) return setState({ notFound: true })\n\n          // loop handing columns\n          let columns = JSON.parse(current[0].columns as string)\n          columns = columnsController({ t, columns })\n          const schema = { ...current[0], columns }\n\n          setState({ schema, data: current[0] })\n          setReady(true)\n        })\n    })()\n  }, [name])\n\n  if (notFound)\n    return (\n      <div style={{ display: \"flex\" }}>\n        <CommonError\n          statusCode={404}\n          hasLayout={false}\n          message={\n            \"The schema does not existed, you can add it using Schema Manager.\"\n          }\n          redirect={LocalDataRoute.schema}\n        />\n      </div>\n    )\n\n  // handle auth path START\n  if (!ready && isAuthPath) return null\n\n  if (ready && isAuthPath) {\n    // When the auth path does not exist in the plugin, a blank page will be rendered\n    return (\n      <Plugins\n        team={data.team}\n        group={data.group}\n        name={data.name}\n        hideLoading={true}\n      />\n    )\n  }\n  // handle user path END\n\n  if (!ready) return <TableSkeleton />\n\n  // Check customized\n  if (data.customized) {\n    return <Plugins team={data.team} group={data.group} name={data.name} />\n  }\n\n  const title = (data.label && t(data.label)) || t(name)\n\n  return (\n    <>\n      <CommonTableHead title={title} />\n      <CommonTable\n        title={title}\n        columns={(schema.columns as unknown) as Column<any>[]}\n        editable={editableController()}\n        // style\n        style={DefaultProps.style}\n        // icons\n        icons={tableIcons({ theme })}\n        // options\n        options={{ ...DefaultProps.options, filtering: true }}\n        // data\n        data={query => dataController({ query, name: data.name })}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}