{"ast":null,"code":"var _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/components/Dialog/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport ConfirmDialog from \"@/components/CommonDialog/ConfirmDialog\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { fsDownload, fsUpload } from \"@/utils/scripts/fs\";\nimport UploadConfirmDialog from \"@/components/CommonDialog/UploadCustomDialog\";\nimport { notice } from \"@/core\";\nexport default function MigrationDialogs({\n  selData,\n  modalState,\n  uploadModal\n}) {\n  return __jsx(React.Fragment, null, __jsx(ConfirmDialog, {\n    openModal: modalState.open,\n    title: modalState.title,\n    msg: modalState.msg,\n    doFunc: async () => {\n      const db = await rxDb();\n\n      switch (selData.mode) {\n        case \"Export DB\":\n          db.dump().then(json => fsDownload(json, \"bunadmin.json\", \"application/json\"));\n          break;\n\n        case \"Import DB\":\n          // db.dump().then((json: any) => console.dir(json))\n          break;\n\n        default:\n          console.error(\"Missing method\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), __jsx(UploadConfirmDialog, {\n    title: uploadModal.title,\n    msg: uploadModal.msg,\n    accept: \"application/json\",\n    openModal: uploadModal.open,\n    onChange: async e => {\n      try {\n        const json = await fsUpload(e);\n        const db = await rxDb(); // dump collection\n\n        if (selData.name !== \"ALL\") {\n          db[selData.name].importDump(json).then(() => {\n            // show notice\n            notice({\n              title: `Import successful`\n            });\n          });\n        } else {\n          // dump database\n          db.importDump(json).then(() => {\n            // show notice\n            notice({\n              title: `Import successful`\n            });\n          });\n        }\n      } catch (e) {\n        // show notice\n        await notice({\n          title: `Import failed`,\n          severity: \"error\",\n          content: e.toString()\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/components/Dialog/index.tsx"],"names":["React","ConfirmDialog","rxDb","fsDownload","fsUpload","UploadConfirmDialog","notice","MigrationDialogs","selData","modalState","uploadModal","open","title","msg","db","mode","dump","then","json","console","error","e","name","importDump","severity","content","toString"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,oBAArC;AACA,OAAOC,mBAAP,MAAgC,8CAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAmBA,eAAe,SAASC,gBAAT,CAA0B;AACvCC,EAAAA,OADuC;AAEvCC,EAAAA,UAFuC;AAGvCC,EAAAA;AAHuC,CAA1B,EAID;AACZ,SACE,4BAEE,MAAC,aAAD;AACE,IAAA,SAAS,EAAED,UAAU,CAACE,IADxB;AAEE,IAAA,KAAK,EAAEF,UAAU,CAACG,KAFpB;AAGE,IAAA,GAAG,EAAEH,UAAU,CAACI,GAHlB;AAIE,IAAA,MAAM,EAAE,YAAY;AAClB,YAAMC,EAAE,GAAG,MAAMZ,IAAI,EAArB;;AACA,cAAQM,OAAO,CAACO,IAAhB;AACE,aAAK,WAAL;AACED,UAAAA,EAAE,CAACE,IAAH,GAAUC,IAAV,CAAgBC,IAAD,IACbf,UAAU,CAACe,IAAD,EAAO,eAAP,EAAwB,kBAAxB,CADZ;AAGA;;AACF,aAAK,WAAL;AACE;AACA;;AACF;AACEC,UAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd;AAVJ;AAYD,KAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAuBE,MAAC,mBAAD;AACE,IAAA,KAAK,EAAEV,WAAW,CAACE,KADrB;AAEE,IAAA,GAAG,EAAEF,WAAW,CAACG,GAFnB;AAGE,IAAA,MAAM,EAAC,kBAHT;AAIE,IAAA,SAAS,EAAEH,WAAW,CAACC,IAJzB;AAKE,IAAA,QAAQ,EAAE,MAAMU,CAAN,IAAW;AACnB,UAAI;AACF,cAAMH,IAAI,GAAG,MAAMd,QAAQ,CAACiB,CAAD,CAA3B;AACA,cAAMP,EAAE,GAAG,MAAMZ,IAAI,EAArB,CAFE,CAGF;;AACA,YAAIM,OAAO,CAACc,IAAR,KAAiB,KAArB,EAA4B;AAC1BR,UAAAA,EAAE,CAACN,OAAO,CAACc,IAAT,CAAF,CAAiBC,UAAjB,CAA4BL,IAA5B,EAAkCD,IAAlC,CAAuC,MAAM;AAC3C;AACAX,YAAAA,MAAM,CAAC;AAAEM,cAAAA,KAAK,EAAG;AAAV,aAAD,CAAN;AACD,WAHD;AAID,SALD,MAKO;AACL;AACAE,UAAAA,EAAE,CAACS,UAAH,CAAcL,IAAd,EAAoBD,IAApB,CAAyB,MAAM;AAC7B;AACAX,YAAAA,MAAM,CAAC;AAAEM,cAAAA,KAAK,EAAG;AAAV,aAAD,CAAN;AACD,WAHD;AAID;AACF,OAhBD,CAgBE,OAAOS,CAAP,EAAU;AACV;AACA,cAAMf,MAAM,CAAC;AACXM,UAAAA,KAAK,EAAG,eADG;AAEXY,UAAAA,QAAQ,EAAE,OAFC;AAGXC,UAAAA,OAAO,EAAEJ,CAAC,CAACK,QAAF;AAHE,SAAD,CAAZ;AAKD;AACF,KA9BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,CADF;AA0DD","sourcesContent":["import React from \"react\"\nimport ConfirmDialog from \"@/components/CommonDialog/ConfirmDialog\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { fsDownload, fsUpload } from \"@/utils/scripts/fs\"\nimport UploadConfirmDialog from \"@/components/CommonDialog/UploadCustomDialog\"\nimport { notice } from \"@/core\"\n\ninterface Interface {\n  selData: {\n    name: string\n    mode: string\n  }\n  modalState: {\n    open: number\n    title: string\n    msg: string\n  }\n  uploadModal: {\n    open: number\n    title: string\n    msg: string\n  }\n}\n\nexport default function MigrationDialogs({\n  selData,\n  modalState,\n  uploadModal\n}: Interface) {\n  return (\n    <>\n      {/* ConfirmDialog */}\n      <ConfirmDialog\n        openModal={modalState.open}\n        title={modalState.title}\n        msg={modalState.msg}\n        doFunc={async () => {\n          const db = await rxDb()\n          switch (selData.mode) {\n            case \"Export DB\":\n              db.dump().then((json: any) =>\n                fsDownload(json, \"bunadmin.json\", \"application/json\")\n              )\n              break\n            case \"Import DB\":\n              // db.dump().then((json: any) => console.dir(json))\n              break\n            default:\n              console.error(\"Missing method\")\n          }\n        }}\n      />\n      {/* UploadConfirmDialog */}\n      <UploadConfirmDialog\n        title={uploadModal.title}\n        msg={uploadModal.msg}\n        accept=\"application/json\"\n        openModal={uploadModal.open}\n        onChange={async e => {\n          try {\n            const json = await fsUpload(e)\n            const db = await rxDb()\n            // dump collection\n            if (selData.name !== \"ALL\") {\n              db[selData.name].importDump(json).then(() => {\n                // show notice\n                notice({ title: `Import successful` })\n              })\n            } else {\n              // dump database\n              db.importDump(json).then(() => {\n                // show notice\n                notice({ title: `Import successful` })\n              })\n            }\n          } catch (e) {\n            // show notice\n            await notice({\n              title: `Import failed`,\n              severity: \"error\",\n              content: e.toString()\n            })\n          }\n        }}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}