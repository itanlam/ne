{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nvar collection = Collection.name;\nvar primary = Primary;\nexport default function noticeController(_x) {\n  return _noticeController.apply(this, arguments);\n}\n\nfunction _noticeController() {\n  _noticeController = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var title, severity, content, nanoId, created_at, db, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            title = _ref.title, severity = _ref.severity, content = _ref.content;\n            nanoId = require(\"nanoid\")(10);\n            created_at = {\n              created_at: Date.now()\n            };\n            _context.prev = 3;\n            _context.next = 6;\n            return rxDb();\n\n          case 6:\n            db = _context.sent;\n            data = {\n              title: title,\n              severity: severity || \"success\",\n              content: content\n            };\n            _context.next = 10;\n            return db[collection].insert(_objectSpread(_objectSpread(_defineProperty({}, primary, nanoId), created_at), data));\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n            console.error(\"notice error\", _context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 12]]);\n  }));\n  return _noticeController.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/notice/controllers/noticeController.tsx"],"names":["rxDb","Collection","Primary","collection","name","primary","noticeController","title","severity","content","nanoId","require","created_at","Date","now","db","data","insert","console","error"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,4BAAjB;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,IAAMC,UAAU,GAAGF,UAAU,CAACG,IAA9B;AACA,IAAMC,OAAO,GAAGH,OAAhB;AAQA,wBAA8BI,gBAA9B;AAAA;AAAA;;;+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,KADa,QACbA,KADa,EAEbC,QAFa,QAEbA,QAFa,EAGbC,OAHa,QAGbA,OAHa;AAKPC,YAAAA,MALO,GAKEC,OAAO,CAAC,QAAD,CAAP,CAAkB,EAAlB,CALF;AAMPC,YAAAA,UANO,GAMM;AAAEA,cAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAAd,aANN;AAAA;AAAA;AAAA,mBASMd,IAAI,EATV;;AAAA;AASLe,YAAAA,EATK;AAWLC,YAAAA,IAXK,GAWE;AAAET,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,QAAQ,EAAEA,QAAQ,IAAI,SAA/B;AAA0CC,cAAAA,OAAO,EAAPA;AAA1C,aAXF;AAAA;AAAA,mBAaLM,EAAE,CAACZ,UAAD,CAAF,CAAec,MAAf,iDACHZ,OADG,EACOK,MADP,GAEDE,UAFC,GAGDI,IAHC,EAbK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBXE,YAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { SeverityType } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\n\nconst collection = Collection.name\nconst primary = Primary\n\ninterface Interface {\n  title: string\n  severity?: SeverityType | null\n  content?: string\n}\n\nexport default async function noticeController({\n  title,\n  severity,\n  content\n}: Interface) {\n  const nanoId = require(\"nanoid\")(10)\n  const created_at = { created_at: Date.now() }\n\n  try {\n    const db = await rxDb()\n\n    const data = { title, severity: severity || \"success\", content }\n\n    await db[collection].insert({\n      [primary]: nanoId,\n      ...created_at,\n      ...data\n    })\n  } catch (e) {\n    console.error(\"notice error\", e)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}