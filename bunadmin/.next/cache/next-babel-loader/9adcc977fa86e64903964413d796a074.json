{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\";\nimport storedToken from \"@/utils/scripts/storedToken\";\nimport { ENV } from \"@/utils/config\";\nexport default function listSer(_x) {\n  return _listSer.apply(this, arguments);\n}\n\nfunction _listSer() {\n  _listSer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var _params;\n\n    var query, SchemaName, search, page, pageSize, token, defSearchField, searchField, params, data, _yield$request, count;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query, SchemaName = _ref.SchemaName;\n            search = query.search, page = query.page, pageSize = query.pageSize; // const { search, page, pageSize, filters } = query\n            // todo filters\n\n            _context.next = 4;\n            return storedToken();\n\n          case 4:\n            token = _context.sent;\n            defSearchField = \"name\";\n            searchField = \"\".concat(defSearchField, \"_contains\");\n            params = (_params = {}, _defineProperty(_params, searchField, search || \"\"), _defineProperty(_params, \"_limit\", pageSize), _defineProperty(_params, \"_sort\", \"created_at:DESC\"), _defineProperty(_params, \"_start\", page * pageSize), _params);\n            _context.next = 10;\n            return request(\"/content-manager/explorer/application::\".concat(SchemaName, \".\").concat(SchemaName), {\n              params: params,\n              prefix: ENV.AUTH_URL,\n              method: \"GET\",\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 10:\n            data = _context.sent;\n            _context.next = 13;\n            return request(\"/content-manager/explorer/application::\".concat(SchemaName, \".\").concat(SchemaName, \"/count\"), {\n              params: params,\n              prefix: ENV.AUTH_URL,\n              method: \"GET\",\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 13:\n            _yield$request = _context.sent;\n            count = _yield$request.count;\n            return _context.abrupt(\"return\", {\n              data: data,\n              totalCount: count,\n              errors: data.status >= 400 ? \"Fetch error\" : undefined\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _listSer.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/services/listSer.tsx"],"names":["request","storedToken","ENV","listSer","query","SchemaName","search","page","pageSize","token","defSearchField","searchField","params","prefix","AUTH_URL","method","headers","Authorization","data","count","totalCount","errors","status","undefined"],"mappings":";;;;AAAA;;;AAGA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAGA,wBAA8BC,OAA9B;AAAA;AAAA;;;sEAAe;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBC,YAAAA,KAAzB,QAAyBA,KAAzB,EAAgCC,UAAhC,QAAgCA,UAAhC;AACLC,YAAAA,MADK,GACsBF,KADtB,CACLE,MADK,EACGC,IADH,GACsBH,KADtB,CACGG,IADH,EACSC,QADT,GACsBJ,KADtB,CACSI,QADT,EAEb;AACA;;AAHa;AAAA,mBAIOP,WAAW,EAJlB;;AAAA;AAIPQ,YAAAA,KAJO;AAMPC,YAAAA,cANO,GAMU,MANV;AAQTC,YAAAA,WARS,aAQQD,cARR;AAUPE,YAAAA,MAVO,2CAWVD,WAXU,EAWIL,MAAM,IAAI,EAXd,sCAYHE,QAZG,qCAaJ,iBAbI,sCAcHD,IAAI,GAAGC,QAdJ;AAAA;AAAA,mBAiBMR,OAAO,kDACkBK,UADlB,cACgCA,UADhC,GAExB;AACEO,cAAAA,MAAM,EAANA,MADF;AAEEC,cAAAA,MAAM,EAAEX,GAAG,CAACY,QAFd;AAGEC,cAAAA,MAAM,EAAE,KAHV;AAIEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,mBAAYR,KAAZ;AADN;AAJX,aAFwB,CAjBb;;AAAA;AAiBPS,YAAAA,IAjBO;AAAA;AAAA,mBA6BWlB,OAAO,kDACaK,UADb,cAC2BA,UAD3B,aAE7B;AACEO,cAAAA,MAAM,EAANA,MADF;AAEEC,cAAAA,MAAM,EAAEX,GAAG,CAACY,QAFd;AAGEC,cAAAA,MAAM,EAAE,KAHV;AAIEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,mBAAYR,KAAZ;AADN;AAJX,aAF6B,CA7BlB;;AAAA;AAAA;AA6BLU,YAAAA,KA7BK,kBA6BLA,KA7BK;AAAA,6CAyCN;AACLD,cAAAA,IAAI,EAAJA,IADK;AAELE,cAAAA,UAAU,EAAED,KAFP;AAGLE,cAAAA,MAAM,EAAEH,IAAI,CAACI,MAAL,IAAe,GAAf,GAAqB,aAArB,GAAqCC;AAHxC,aAzCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\"\nimport storedToken from \"@/utils/scripts/storedToken\"\nimport { ENV } from \"@/utils/config\"\nimport { DataCtrl } from \"../types\"\n\nexport default async function listSer({ query, SchemaName }: DataCtrl) {\n  const { search, page, pageSize } = query\n  // const { search, page, pageSize, filters } = query\n  // todo filters\n  const token = await storedToken()\n\n  const defSearchField = \"name\"\n\n  let searchField = `${defSearchField}_contains`\n\n  const params = {\n    [searchField]: search || \"\",\n    _limit: pageSize,\n    _sort: \"created_at:DESC\",\n    _start: page * pageSize\n  }\n\n  const data = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}`,\n    {\n      params,\n      prefix: ENV.AUTH_URL,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  const { count } = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}/count`,\n    {\n      params,\n      prefix: ENV.AUTH_URL,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  return {\n    data,\n    totalCount: count,\n    errors: data.status >= 400 ? \"Fetch error\" : undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module"}