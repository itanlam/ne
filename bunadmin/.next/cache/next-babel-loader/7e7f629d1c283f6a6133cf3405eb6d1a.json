{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\";\nimport storedToken from \"@/utils/scripts/storedToken\";\nimport { ENV } from \"@/utils/config\";\nexport default async function filtersQuery({\n  SchemaName,\n  filters\n}) {\n  const token = await storedToken();\n\n  const params = _objectSpread(_objectSpread({}, filters), {}, {\n    _sort: \"created_at:DESC\",\n    _limit: 30,\n    _start: 0\n  });\n\n  return await request(`/content-manager/explorer/application::${SchemaName}.${SchemaName}`, {\n    params,\n    prefix: ENV.AUTH_URL,\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/services/filtersQuery.tsx"],"names":["request","storedToken","ENV","filtersQuery","SchemaName","filters","token","params","_sort","_limit","_start","prefix","AUTH_URL","method","headers","Authorization"],"mappings":";;;;;;AAAA;;;AAGA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,eAAe,eAAeC,YAAf,CAA4B;AACzCC,EAAAA,UADyC;AAEzCC,EAAAA;AAFyC,CAA5B,EAMZ;AACD,QAAMC,KAAK,GAAG,MAAML,WAAW,EAA/B;;AAEA,QAAMM,MAAM,mCACPF,OADO;AAEVG,IAAAA,KAAK,EAAE,iBAFG;AAGVC,IAAAA,MAAM,EAAE,EAHE;AAIVC,IAAAA,MAAM,EAAE;AAJE,IAAZ;;AAOA,SAAO,MAAMV,OAAO,CACjB,0CAAyCI,UAAW,IAAGA,UAAW,EADjD,EAElB;AACEG,IAAAA,MADF;AAEEI,IAAAA,MAAM,EAAET,GAAG,CAACU,QAFd;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAAST,KAAM;AADxB;AAJX,GAFkB,CAApB;AAWD","sourcesContent":["/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\"\nimport storedToken from \"@/utils/scripts/storedToken\"\nimport { ENV } from \"@/utils/config\"\n\nexport default async function filtersQuery({\n  SchemaName,\n  filters\n}: {\n  SchemaName: string\n  filters?: any\n}) {\n  const token = await storedToken()\n\n  const params = {\n    ...filters,\n    _sort: \"created_at:DESC\",\n    _limit: 30,\n    _start: 0\n  }\n\n  return await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}`,\n    {\n      params,\n      prefix: ENV.AUTH_URL,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}