{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nimport rxSubscribe from \"@/utils/database/rxSubscribe\";\nimport { Collection } from \"@/core/notice/collections\";\nimport { withSnackbar } from \"notistack\";\n\nfunction CommonSnackbar(props) {\n  _s();\n\n  React.useEffect(function () {\n    ;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return rxSubscribe({\n                collection: Collection.name,\n                sort: {\n                  created_at: \"desc\"\n                },\n                callback: function callback(data) {\n                  var item = data[0];\n                  if (!item) return console.warn(\"no notices\");\n                  var lastNoticeMS = Date.now() - item.created_at;\n                  if (lastNoticeMS > 10000) return; // 10s\n\n                  handleClick({\n                    message: item.title\n                  });\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, []);\n\n  var handleClick = function handleClick(_ref2) {\n    var message = _ref2.message;\n    props.enqueueSnackbar(message, {\n      variant: \"success\"\n    });\n  };\n\n  return null;\n}\n\n_s(CommonSnackbar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CommonSnackbar;\nexport default _c2 = withSnackbar(CommonSnackbar);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CommonSnackbar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSnackbar/index.tsx"],"names":["React","rxSubscribe","Collection","withSnackbar","CommonSnackbar","props","useEffect","collection","name","sort","created_at","callback","data","item","console","warn","lastNoticeMS","Date","now","handleClick","message","title","enqueueSnackbar","variant"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAA0BC,YAA1B,QAAiE,WAAjE;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAAkD;AAAA;;AAChDL,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AACpB;;AAAC,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACML,WAAW,CAAC;AAChBM,gBAAAA,UAAU,EAAEL,UAAU,CAACM,IADP;AAEhBC,gBAAAA,IAAI,EAAE;AAAEC,kBAAAA,UAAU,EAAE;AAAd,iBAFU;AAGhBC,gBAAAA,QAAQ,EAAE,kBAAAC,IAAI,EAAI;AAChB,sBAAMC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAjB;AAEA,sBAAI,CAACC,IAAL,EAAW,OAAOC,OAAO,CAACC,IAAR,CAAa,YAAb,CAAP;AACX,sBAAMC,YAAY,GAAGC,IAAI,CAACC,GAAL,KAAaL,IAAI,CAACH,UAAvC;AAEA,sBAAIM,YAAY,GAAG,KAAnB,EAA0B,OANV,CAMiB;;AACjCG,kBAAAA,WAAW,CAAC;AAAEC,oBAAAA,OAAO,EAAEP,IAAI,CAACQ;AAAhB,mBAAD,CAAX;AACD;AAXe,eAAD,CADjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAeF,GAhBD,EAgBG,EAhBH;;AAkBA,MAAMF,WAAW,GAAG,SAAdA,WAAc,QAA+C;AAAA,QAA5CC,OAA4C,SAA5CA,OAA4C;AACjEf,IAAAA,KAAK,CAACiB,eAAN,CAAsBF,OAAtB,EAA+B;AAC7BG,MAAAA,OAAO,EAAE;AADoB,KAA/B;AAGD,GAJD;;AAMA,SAAO,IAAP;AACD;;GA1BQnB,c;;KAAAA,c;AA4BT,qBAAeD,YAAY,CAACC,cAAD,CAA3B","sourcesContent":["import React from \"react\"\nimport rxSubscribe from \"@/utils/database/rxSubscribe\"\nimport { Collection } from \"@/core/notice/collections\"\nimport { SnackbarMessage, withSnackbar, WithSnackbarProps } from \"notistack\"\n\nfunction CommonSnackbar(props: WithSnackbarProps) {\n  React.useEffect(() => {\n    ;(async () => {\n      await rxSubscribe({\n        collection: Collection.name,\n        sort: { created_at: \"desc\" },\n        callback: data => {\n          const item = data[0]\n\n          if (!item) return console.warn(\"no notices\")\n          const lastNoticeMS = Date.now() - item.created_at\n\n          if (lastNoticeMS > 10000) return // 10s\n          handleClick({ message: item.title })\n        }\n      })\n    })()\n  }, [])\n\n  const handleClick = ({ message }: { message: SnackbarMessage }) => {\n    props.enqueueSnackbar(message, {\n      variant: \"success\"\n    })\n  }\n\n  return null\n}\n\nexport default withSnackbar(CommonSnackbar)\n"]},"metadata":{},"sourceType":"module"}