{"ast":null,"code":"import rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nexport function editableController() {\n  const collection = Collection.name;\n  const primary = Primary; // const nanoId = require(\"nanoid\")(10)\n  // const created_at = { created_at: Date.now() }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    // onRowAdd: newData =>\n    //   new Promise(async resolve => {\n    //     try {\n    //       const db = await rxDb()\n    //\n    //       const severity = newData.severity\n    //         ? { severity: newData.severity }\n    //         : { severity: \"success\" }\n    //\n    //       await db[collection].insert({\n    //         ...newData,\n    //         [primary]: nanoId,\n    //         ...created_at,\n    //         ...severity\n    //       })\n    //     } catch (e) {\n    //       console.error(e)\n    //     }\n    //\n    //     resolve()\n    //   }),\n    // onRowUpdate: newData =>\n    //   new Promise(async resolve => {\n    //     try {\n    //       const db = await rxDb()\n    //\n    //       const query = db[collection]\n    //         .findOne()\n    //         .where(primary)\n    //         .eq(newData[primary])\n    //\n    //       await query.update({\n    //         $set: newData\n    //       })\n    //     } catch (e) {\n    //       console.error(e)\n    //     }\n    //\n    //     resolve()\n    //   }),\n    onRowDelete: oldData => new Promise(async resolve => {\n      try {\n        const db = await rxDb();\n        const query = db[collection].findOne().where(primary).eq(oldData[primary]);\n        await query.remove();\n      } catch (e) {\n        console.error(e);\n      }\n\n      resolve();\n    })\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/notice/controllers/editableController.tsx"],"names":["rxDb","Collection","Primary","editableController","collection","name","primary","onRowDelete","oldData","Promise","resolve","db","query","findOne","where","eq","remove","e","console","error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,4BAAjB;AAGA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,SAASC,kBAAT,GAAsD;AAC3D,QAAMC,UAAU,GAAGH,UAAU,CAACI,IAA9B;AACA,QAAMC,OAAO,GAAGJ,OAAhB,CAF2D,CAI3D;AACA;;AAEA,SAAO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,IAAAA,WAAW,EAAEC,OAAO,IAClB,IAAIC,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAC3B,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMX,IAAI,EAArB;AAEA,cAAMY,KAAK,GAAGD,EAAE,CAACP,UAAD,CAAF,CACXS,OADW,GAEXC,KAFW,CAELR,OAFK,EAGXS,EAHW,CAGRP,OAAO,CAACF,OAAD,CAHC,CAAd;AAKA,cAAMM,KAAK,CAACI,MAAN,EAAN;AACD,OATD,CASE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAEDP,MAAAA,OAAO;AACR,KAfD;AA5CG,GAAP;AA6DD","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport { Type } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\n\nexport function editableController(): EditableDataType<Type> {\n  const collection = Collection.name\n  const primary = Primary\n\n  // const nanoId = require(\"nanoid\")(10)\n  // const created_at = { created_at: Date.now() }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    // onRowAdd: newData =>\n    //   new Promise(async resolve => {\n    //     try {\n    //       const db = await rxDb()\n    //\n    //       const severity = newData.severity\n    //         ? { severity: newData.severity }\n    //         : { severity: \"success\" }\n    //\n    //       await db[collection].insert({\n    //         ...newData,\n    //         [primary]: nanoId,\n    //         ...created_at,\n    //         ...severity\n    //       })\n    //     } catch (e) {\n    //       console.error(e)\n    //     }\n    //\n    //     resolve()\n    //   }),\n    // onRowUpdate: newData =>\n    //   new Promise(async resolve => {\n    //     try {\n    //       const db = await rxDb()\n    //\n    //       const query = db[collection]\n    //         .findOne()\n    //         .where(primary)\n    //         .eq(newData[primary])\n    //\n    //       await query.update({\n    //         $set: newData\n    //       })\n    //     } catch (e) {\n    //       console.error(e)\n    //     }\n    //\n    //     resolve()\n    //   }),\n    onRowDelete: oldData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(oldData[primary])\n\n          await query.remove()\n        } catch (e) {\n          console.error(e)\n        }\n\n        resolve()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}