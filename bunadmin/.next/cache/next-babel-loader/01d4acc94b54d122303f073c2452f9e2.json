{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { CoreGroupName } from \"@/utils/routes\";\nimport { notice } from \"@/core\";\nexport function editableController() {\n  function checkGroup(_x) {\n    return _checkGroup.apply(this, arguments);\n  }\n\n  function _checkGroup() {\n    _checkGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(group) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(group === CoreGroupName)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 3;\n              return notice({\n                title: \"Created failed\",\n                severity: \"error\",\n                content: \"Group name can't be `core`\"\n              });\n\n            case 3:\n              return _context4.abrupt(\"return\", true);\n\n            case 6:\n              return _context4.abrupt(\"return\", false);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _checkGroup.apply(this, arguments);\n  }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: function onRowAdd(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return checkGroup(newData.group);\n\n                case 2:\n                  if (!_context.sent) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", resolve());\n\n                case 4:\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    onRowUpdate: function onRowUpdate(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return checkGroup(newData.group);\n\n                case 2:\n                  if (!_context2.sent) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", resolve());\n\n                case 4:\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    onRowDelete: function onRowDelete() {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resolve) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  resolve();\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSchema/controllers/editableController.tsx"],"names":["CoreGroupName","notice","editableController","checkGroup","group","title","severity","content","onRowAdd","newData","Promise","resolve","onRowUpdate","onRowDelete"],"mappings":";;AACA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,SAASC,kBAAT,GAAqD;AAAA,WAC3CC,UAD2C;AAAA;AAAA;;AAAA;AAAA,2EAC1D,kBAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,oBACMA,KAAK,KAAKJ,aADhB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGUC,MAAM,CAAC;AACXI,gBAAAA,KAAK,kBADM;AAEXC,gBAAAA,QAAQ,EAAE,OAFC;AAGXC,gBAAAA,OAAO,EAAE;AAHE,eAAD,CAHhB;;AAAA;AAAA,gDAQW,IARX;;AAAA;AAAA,gDAUW,KAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0D;AAAA;AAAA;;AAe1D,SAAO;AACL;AACA;AACAC,IAAAA,QAAQ,EAAE,kBAAAC,OAAO;AAAA,aACf,IAAIC,OAAJ;AAAA,4EAAY,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEAR,UAAU,CAACM,OAAO,CAACL,KAAT,CAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,mDAGDO,OAAO,EAHN;;AAAA;AAMVA,kBAAAA,OAAO;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UADe;AAAA,KAHZ;AAYLC,IAAAA,WAAW,EAAE,qBAAAH,OAAO;AAAA,aAClB,IAAIC,OAAJ;AAAA,6EAAY,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEAR,UAAU,CAACM,OAAO,CAACL,KAAT,CAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oDAGDO,OAAO,EAHN;;AAAA;AAMVA,kBAAAA,OAAO;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UADkB;AAAA,KAZf;AAqBLE,IAAAA,WAAW,EAAE;AAAA,aACX,IAAIH,OAAJ;AAAA,6EAAY,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AACVA,kBAAAA,OAAO;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UADW;AAAA;AArBR,GAAP;AA0BD","sourcesContent":["import { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport { CoreGroupName } from \"@/utils/routes\"\nimport { notice } from \"@/core\"\n\nexport function editableController(): EditableDataType<any> {\n  async function checkGroup(group: string) {\n    if (group === CoreGroupName) {\n      // show notice\n      await notice({\n        title: `Created failed`,\n        severity: \"error\",\n        content: \"Group name can't be `core`\"\n      })\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: newData =>\n      new Promise(async resolve => {\n        // check group\n        if (await checkGroup(newData.group)) {\n          return resolve()\n        }\n\n        resolve()\n      }),\n    onRowUpdate: newData =>\n      new Promise(async resolve => {\n        // check group\n        if (await checkGroup(newData.group)) {\n          return resolve()\n        }\n\n        resolve()\n      }),\n    onRowDelete: () =>\n      new Promise(async resolve => {\n        resolve()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}