{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function rxInitData(_x) {\n  return _rxInitData.apply(this, arguments);\n}\n\nfunction _rxInitData() {\n  _rxInitData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var db, collection, name, initFunc, setting, is_init;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            db = _ref.db, collection = _ref.collection, name = _ref.name, initFunc = _ref.initFunc;\n            setting = db[collection];\n            _context.next = 4;\n            return setting.findOne({\n              name: {\n                $eq: name\n              }\n            }).exec();\n\n          case 4:\n            is_init = _context.sent;\n\n            if (!is_init) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", console.log(\"DatabaseService: \".concat(name, \" already exists\")));\n\n          case 9:\n            _context.next = 11;\n            return initFunc();\n\n          case 11:\n            _context.next = 13;\n            return setting.upsert({\n              name: name,\n              value: \"done\"\n            });\n\n          case 13:\n            console.log(\"DatabaseService: \".concat(name, \" done\"));\n            return _context.abrupt(\"return\", location.reload());\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _rxInitData.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/database/rxInitData/index.tsx"],"names":["rxInitData","db","collection","name","initFunc","setting","findOne","$eq","exec","is_init","console","log","upsert","value","location","reload"],"mappings":";;AASA,wBAA8BA,UAA9B;AAAA;AAAA;;;yEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,EADa,QACbA,EADa,EAEbC,UAFa,QAEbA,UAFa,EAGbC,IAHa,QAGbA,IAHa,EAIbC,QAJa,QAIbA,QAJa;AAMPC,YAAAA,OANO,GAMGJ,EAAE,CAACC,UAAD,CANL;AAAA;AAAA,mBAOSG,OAAO,CAACC,OAAR,CAAgB;AAAEH,cAAAA,IAAI,EAAE;AAAEI,gBAAAA,GAAG,EAAEJ;AAAP;AAAR,aAAhB,EAAyCK,IAAzC,EAPT;;AAAA;AAOPC,YAAAA,OAPO;;AAAA,iBASTA,OATS;AAAA;AAAA;AAAA;;AAAA,6CAgBJC,OAAO,CAACC,GAAR,4BAAgCR,IAAhC,qBAhBI;;AAAA;AAAA;AAAA,mBAkBLC,QAAQ,EAlBH;;AAAA;AAAA;AAAA,mBAqBLC,OAAO,CAACO,MAAR,CAAe;AACnBT,cAAAA,IAAI,EAAEA,IADa;AAEnBU,cAAAA,KAAK,EAAE;AAFY,aAAf,CArBK;;AAAA;AA0BXH,YAAAA,OAAO,CAACC,GAAR,4BAAgCR,IAAhC;AA1BW,6CA4BJW,QAAQ,CAACC,MAAT,EA5BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { RxDatabase } from \"rxdb/dist/typings/types\"\n\ninterface Props {\n  db: RxDatabase<any>\n  collection: string\n  name: string\n  initFunc: () => Promise<void>\n}\n\nexport default async function rxInitData({\n  db,\n  collection,\n  name,\n  initFunc\n}: Props) {\n  const setting = db[collection]\n  const is_init = await setting.findOne({ name: { $eq: name } }).exec()\n\n  if (is_init) {\n    /**\n     * !!!DEBUG ONLY\n     * Initialize data every refresh\n     */\n    // await setting.remove()\n\n    return console.log(`DatabaseService: ${name} already exists`)\n  } else {\n    await initFunc()\n\n    // set init status\n    await setting.upsert({\n      name: name,\n      value: \"done\"\n    })\n\n    console.log(`DatabaseService: ${name} done`)\n\n    return location.reload()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}