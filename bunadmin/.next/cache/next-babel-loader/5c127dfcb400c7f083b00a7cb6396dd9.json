{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nconst collection = Collection.name;\nconst primary = Primary;\nexport default async function noticeController({\n  title,\n  severity,\n  content\n}) {\n  const nanoId = require(\"nanoid\")(10);\n\n  const created_at = {\n    created_at: Date.now()\n  };\n\n  try {\n    const db = await rxDb();\n    const data = {\n      title,\n      severity: severity || \"success\",\n      content\n    };\n    await db[collection].insert(_objectSpread(_objectSpread({\n      [primary]: nanoId\n    }, created_at), data));\n  } catch (e) {\n    console.error(\"notice error\", e);\n  }\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/notice/controllers/noticeController.tsx"],"names":["rxDb","Collection","Primary","collection","name","primary","noticeController","title","severity","content","nanoId","require","created_at","Date","now","db","data","insert","e","console","error"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,4BAAjB;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,MAAMC,UAAU,GAAGF,UAAU,CAACG,IAA9B;AACA,MAAMC,OAAO,GAAGH,OAAhB;AAQA,eAAe,eAAeI,gBAAf,CAAgC;AAC7CC,EAAAA,KAD6C;AAE7CC,EAAAA,QAF6C;AAG7CC,EAAAA;AAH6C,CAAhC,EAID;AACZ,QAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkB,EAAlB,CAAf;;AACA,QAAMC,UAAU,GAAG;AAAEA,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAAd,GAAnB;;AAEA,MAAI;AACF,UAAMC,EAAE,GAAG,MAAMf,IAAI,EAArB;AAEA,UAAMgB,IAAI,GAAG;AAAET,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,SAA/B;AAA0CC,MAAAA;AAA1C,KAAb;AAEA,UAAMM,EAAE,CAACZ,UAAD,CAAF,CAAec,MAAf;AACJ,OAACZ,OAAD,GAAWK;AADP,OAEDE,UAFC,GAGDI,IAHC,EAAN;AAKD,GAVD,CAUE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BF,CAA9B;AACD;AACF","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { SeverityType } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\n\nconst collection = Collection.name\nconst primary = Primary\n\ninterface Interface {\n  title: string\n  severity?: SeverityType | null\n  content?: string\n}\n\nexport default async function noticeController({\n  title,\n  severity,\n  content\n}: Interface) {\n  const nanoId = require(\"nanoid\")(10)\n  const created_at = { created_at: Date.now() }\n\n  try {\n    const db = await rxDb()\n\n    const data = { title, severity: severity || \"success\", content }\n\n    await db[collection].insert({\n      [primary]: nanoId,\n      ...created_at,\n      ...data\n    })\n  } catch (e) {\n    console.error(\"notice error\", e)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}