{"ast":null,"code":"import updateSer from \"../services/updateSer\";\nimport deleteSer from \"../services/deleteSer\";\nimport addSer from \"../services/addSer\";\n\nfunction editableCtrl({\n  SchemaName\n}) {\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: async newData => await addSer({\n      newData,\n      SchemaName\n    }),\n    onRowUpdate: async (newData, oldData) => await updateSer({\n      newData,\n      oldData,\n      SchemaName\n    }),\n    onRowDelete: oldData => deleteSer({\n      oldData,\n      SchemaName\n    })\n  };\n}\n\nexport default editableCtrl;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/controllers/editableCtrl.tsx"],"names":["updateSer","deleteSer","addSer","editableCtrl","SchemaName","onRowAdd","newData","onRowUpdate","oldData","onRowDelete"],"mappings":"AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAA2E;AACzE,SAAO;AACL;AACA;AACAC,IAAAA,QAAQ,EAAE,MAAMC,OAAN,IAAiB,MAAMJ,MAAM,CAAC;AAAEI,MAAAA,OAAF;AAAWF,MAAAA;AAAX,KAAD,CAHlC;AAILG,IAAAA,WAAW,EAAE,OAAOD,OAAP,EAAgBE,OAAhB,KACX,MAAMR,SAAS,CAAC;AAAEM,MAAAA,OAAF;AAAWE,MAAAA,OAAX;AAAoBJ,MAAAA;AAApB,KAAD,CALZ;AAMLK,IAAAA,WAAW,EAAED,OAAO,IAAIP,SAAS,CAAC;AAAEO,MAAAA,OAAF;AAAWJ,MAAAA;AAAX,KAAD;AAN5B,GAAP;AAQD;;AAED,eAAeD,YAAf","sourcesContent":["import { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport updateSer from \"../services/updateSer\"\nimport deleteSer from \"../services/deleteSer\"\nimport addSer from \"../services/addSer\"\nimport { EditableCtrl } from \"../types\"\n\nfunction editableCtrl({ SchemaName }: EditableCtrl): EditableDataType<any> {\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: async newData => await addSer({ newData, SchemaName }),\n    onRowUpdate: async (newData, oldData) =>\n      await updateSer({ newData, oldData, SchemaName }),\n    onRowDelete: oldData => deleteSer({ oldData, SchemaName })\n  }\n}\n\nexport default editableCtrl\n"]},"metadata":{},"sourceType":"module"}