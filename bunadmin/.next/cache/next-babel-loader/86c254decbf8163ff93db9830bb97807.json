{"ast":null,"code":"/**\n * request 网络请求工具\n * 更详细的 api 文档\b: https://github.com/umijs/umi-request\n */\nimport { extend } from \"umi-request\";\nimport { ENV } from \"../config\";\nconst codeMessage = {\n  200: \"服务器成功返回请求的数据。\",\n  201: \"新建或修改数据成功。\",\n  202: \"一个请求已经进入后台排队（异步任务）。\",\n  204: \"删除数据成功。\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作。\",\n  401: \"用户没有权限（令牌、用户名、密码错误）。\",\n  403: \"用户得到授权，但是访问是被禁止的。\",\n  404: \"发出的请求针对的是不存在的记录，服务器没有进行操作。\",\n  406: \"请求的格式不可得。\",\n  410: \"请求的资源被永久删除，且不会再得到的。\",\n  422: \"当创建一个对象时，发生一个验证错误。\",\n  500: \"服务器发生错误，请检查服务器。\",\n  502: \"网关错误。\",\n  503: \"服务不可用，服务器暂时过载或维护。\",\n  504: \"网关超时。\"\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = error => {\n  const {\n    response\n  } = error;\n\n  if (response && response.status) {\n    const errorText = codeMessage[response.status] || response.statusText;\n    const {\n      status,\n      url\n    } = response;\n    console.error({\n      message: `请求错误 ${status}: ${url}`,\n      description: errorText\n    });\n  } else if (!response) {\n    const errorMsg = {\n      description: \"您的网络发生异常，无法连接服务器\",\n      message: \"网络异常\"\n    };\n    console.error(errorMsg);\n    return {\n      error: errorMsg\n    };\n  }\n\n  return response;\n};\n/**\n * 配置request请求时的默认参数\n */\n\n\nconst request = extend({\n  errorHandler,\n  // 默认错误处理\n  credentials: \"same-origin\",\n  // 默认请求是否带上cookie\n  prefix: ENV.MAIN_URL,\n  timeout: 2000,\n  // ms\n  redirect: \"follow\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default request;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/scripts/request.tsx"],"names":["extend","ENV","codeMessage","errorHandler","error","response","status","errorText","statusText","url","console","message","description","errorMsg","request","credentials","prefix","MAIN_URL","timeout","redirect","headers"],"mappings":"AAAA;;;;AAIA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,GAAT,QAAoB,WAApB;AAEA,MAAMC,WAAgB,GAAG;AACvB,OAAK,eADkB;AAEvB,OAAK,YAFkB;AAGvB,OAAK,qBAHkB;AAIvB,OAAK,SAJkB;AAKvB,OAAK,6BALkB;AAMvB,OAAK,sBANkB;AAOvB,OAAK,mBAPkB;AAQvB,OAAK,4BARkB;AASvB,OAAK,WATkB;AAUvB,OAAK,qBAVkB;AAWvB,OAAK,oBAXkB;AAYvB,OAAK,iBAZkB;AAavB,OAAK,OAbkB;AAcvB,OAAK,mBAdkB;AAevB,OAAK;AAfkB,CAAzB;;AAyBA;;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAkD;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;;AACA,MAAIC,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC/B,UAAMC,SAAS,GAAGL,WAAW,CAACG,QAAQ,CAACC,MAAV,CAAX,IAAgCD,QAAQ,CAACG,UAA3D;AACA,UAAM;AAAEF,MAAAA,MAAF;AAAUG,MAAAA;AAAV,QAAkBJ,QAAxB;AAEAK,IAAAA,OAAO,CAACN,KAAR,CAAc;AACZO,MAAAA,OAAO,EAAG,QAAOL,MAAO,KAAIG,GAAI,EADpB;AAEZG,MAAAA,WAAW,EAAEL;AAFD,KAAd;AAID,GARD,MAQO,IAAI,CAACF,QAAL,EAAe;AACpB,UAAMQ,QAAQ,GAAG;AACfD,MAAAA,WAAW,EAAE,kBADE;AAEfD,MAAAA,OAAO,EAAE;AAFM,KAAjB;AAIAD,IAAAA,OAAO,CAACN,KAAR,CAAcS,QAAd;AACA,WAAO;AAAET,MAAAA,KAAK,EAAES;AAAT,KAAP;AACD;;AACD,SAAOR,QAAP;AACD,CAnBD;AAqBA;;;;;AAGA,MAAMS,OAAO,GAAGd,MAAM,CAAC;AACrBG,EAAAA,YADqB;AACP;AACdY,EAAAA,WAAW,EAAE,aAFQ;AAEO;AAC5BC,EAAAA,MAAM,EAAEf,GAAG,CAACgB,QAHS;AAIrBC,EAAAA,OAAO,EAAE,IAJY;AAIN;AACfC,EAAAA,QAAQ,EAAE,QALW;AAMrBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AANY,CAAD,CAAtB;AAWA,eAAeN,OAAf","sourcesContent":["/**\n * request 网络请求工具\n * 更详细的 api 文档\b: https://github.com/umijs/umi-request\n */\nimport { extend } from \"umi-request\"\nimport { ENV } from \"../config\"\n\nconst codeMessage: any = {\n  200: \"服务器成功返回请求的数据。\",\n  201: \"新建或修改数据成功。\",\n  202: \"一个请求已经进入后台排队（异步任务）。\",\n  204: \"删除数据成功。\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作。\",\n  401: \"用户没有权限（令牌、用户名、密码错误）。\",\n  403: \"用户得到授权，但是访问是被禁止的。\",\n  404: \"发出的请求针对的是不存在的记录，服务器没有进行操作。\",\n  406: \"请求的格式不可得。\",\n  410: \"请求的资源被永久删除，且不会再得到的。\",\n  422: \"当创建一个对象时，发生一个验证错误。\",\n  500: \"服务器发生错误，请检查服务器。\",\n  502: \"网关错误。\",\n  503: \"服务不可用，服务器暂时过载或维护。\",\n  504: \"网关超时。\"\n}\n\ninterface ErrorResponse extends Response {\n  error: {\n    description?: string\n    message?: string\n  }\n}\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: Response }): ErrorResponse => {\n  const { response } = error\n  if (response && response.status) {\n    const errorText = codeMessage[response.status] || response.statusText\n    const { status, url } = response\n\n    console.error({\n      message: `请求错误 ${status}: ${url}`,\n      description: errorText\n    })\n  } else if (!response) {\n    const errorMsg = {\n      description: \"您的网络发生异常，无法连接服务器\",\n      message: \"网络异常\"\n    }\n    console.error(errorMsg)\n    return { error: errorMsg } as ErrorResponse\n  }\n  return response as ErrorResponse\n}\n\n/**\n * 配置request请求时的默认参数\n */\nconst request = extend({\n  errorHandler, // 默认错误处理\n  credentials: \"same-origin\", // 默认请求是否带上cookie\n  prefix: ENV.MAIN_URL,\n  timeout: 2000, // ms\n  redirect: \"follow\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n})\n\nexport default request\n"]},"metadata":{},"sourceType":"module"}