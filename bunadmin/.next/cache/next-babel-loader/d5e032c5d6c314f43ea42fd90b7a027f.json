{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nimport { CoreGroupName } from \"@/utils/routes\";\nimport { notice } from \"@/core\";\nexport function editableController() {\n  var collection = Collection.name;\n  var primary = Primary;\n\n  var nanoId = require(\"nanoid\")(10);\n\n  var created_at = {\n    created_at: Date.now()\n  };\n  var updated_at = {\n    updated_at: Date.now()\n  };\n\n  function checkGroup(_x) {\n    return _checkGroup.apply(this, arguments);\n  }\n\n  function _checkGroup() {\n    _checkGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(group) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(group === CoreGroupName)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _context4.next = 3;\n              return notice({\n                title: \"Created failed\",\n                severity: \"error\",\n                content: \"Group name can't be `core`\"\n              });\n\n            case 3:\n              return _context4.abrupt(\"return\", true);\n\n            case 6:\n              return _context4.abrupt(\"return\", false);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _checkGroup.apply(this, arguments);\n  }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: function onRowAdd(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n          var db;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return checkGroup(newData.group);\n\n                case 2:\n                  if (!_context.sent) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", resolve());\n\n                case 4:\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return rxDb();\n\n                case 7:\n                  db = _context.sent;\n                  _context.next = 10;\n                  return db[collection].insert(_objectSpread(_objectSpread(_defineProperty({}, primary, nanoId), newData), {}, {\n                    customized: newData.customized === \"true\"\n                  }, created_at));\n\n                case 10:\n                  _context.next = 12;\n                  return notice({\n                    title: \"Created successful\"\n                  });\n\n                case 12:\n                  _context.next = 19;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.error(_context.t0); // console.log(e.parameters.errors.toString())\n                  // show notice\n\n                  _context.next = 19;\n                  return notice({\n                    title: \"Created failed\",\n                    severity: \"error\",\n                    content: _context.t0.toString()\n                  });\n\n                case 19:\n                  resolve();\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 14]]);\n        }));\n\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    onRowUpdate: function onRowUpdate(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n          var db, query;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return checkGroup(newData.group);\n\n                case 2:\n                  if (!_context2.sent) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", resolve());\n\n                case 4:\n                  _context2.prev = 4;\n                  _context2.next = 7;\n                  return rxDb();\n\n                case 7:\n                  db = _context2.sent;\n                  query = db[collection].findOne().where(primary).eq(newData[primary]);\n                  _context2.next = 11;\n                  return query.update({\n                    $set: _objectSpread(_objectSpread({}, newData), {}, {\n                      customized: newData.customized === \"true\"\n                    }, updated_at)\n                  });\n\n                case 11:\n                  _context2.next = 13;\n                  return notice({\n                    title: \"Updated successful\"\n                  });\n\n                case 13:\n                  _context2.next = 20;\n                  break;\n\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t0 = _context2[\"catch\"](4);\n                  console.error(_context2.t0); // show notice\n\n                  _context2.next = 20;\n                  return notice({\n                    title: \"Updated failed\",\n                    severity: \"error\",\n                    content: _context2.t0.toString()\n                  });\n\n                case 20:\n                  resolve();\n\n                case 21:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[4, 15]]);\n        }));\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    onRowDelete: function onRowDelete(oldData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resolve) {\n          var db, query;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return rxDb();\n\n                case 3:\n                  db = _context3.sent;\n                  query = db[collection].findOne().where(primary).eq(oldData[primary]);\n                  _context3.next = 7;\n                  return query.remove();\n\n                case 7:\n                  _context3.next = 9;\n                  return notice({\n                    title: \"Deleted successful\"\n                  });\n\n                case 9:\n                  _context3.next = 16;\n                  break;\n\n                case 11:\n                  _context3.prev = 11;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  console.error(_context3.t0); // show notice\n\n                  _context3.next = 16;\n                  return notice({\n                    title: \"Deleted failed\",\n                    severity: \"error\",\n                    content: _context3.t0.toString()\n                  });\n\n                case 16:\n                  resolve();\n\n                case 17:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 11]]);\n        }));\n\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/schema/controllers/editableController.tsx"],"names":["rxDb","Collection","Primary","CoreGroupName","notice","editableController","collection","name","primary","nanoId","require","created_at","Date","now","updated_at","checkGroup","group","title","severity","content","onRowAdd","newData","Promise","resolve","db","insert","customized","console","error","toString","onRowUpdate","query","findOne","where","eq","update","$set","onRowDelete","oldData","remove"],"mappings":"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","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport { Type } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\nimport { CoreGroupName } from \"@/utils/routes\"\nimport { notice } from \"@/core\"\n\nexport function editableController(): EditableDataType<Type> {\n  const collection = Collection.name\n  const primary = Primary\n\n  const nanoId = require(\"nanoid\")(10)\n  const created_at = { created_at: Date.now() }\n  const updated_at = { updated_at: Date.now() }\n\n  async function checkGroup(group: string) {\n    if (group === CoreGroupName) {\n      // show notice\n      await notice({\n        title: `Created failed`,\n        severity: \"error\",\n        content: \"Group name can't be `core`\"\n      })\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: newData =>\n      new Promise(async resolve => {\n        // check group\n        if (await checkGroup(newData.group)) {\n          return resolve()\n        }\n\n        try {\n          const db = await rxDb()\n\n          await db[collection].insert({\n            // @ts-ignore\n            [primary]: nanoId,\n            ...newData,\n            customized: ((newData.customized as unknown) as string) === \"true\",\n            ...created_at\n          })\n\n          // show notice\n          await notice({ title: `Created successful` })\n        } catch (e) {\n          console.error(e)\n          // console.log(e.parameters.errors.toString())\n\n          // show notice\n          await notice({\n            title: `Created failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowUpdate: newData =>\n      new Promise(async resolve => {\n        // check group\n        if (await checkGroup(newData.group)) {\n          return resolve()\n        }\n\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(newData[primary])\n\n          await query.update({\n            $set: {\n              ...newData,\n              customized:\n                ((newData.customized as unknown) as string) === \"true\",\n              ...updated_at\n            }\n          })\n\n          // show notice\n          await notice({ title: `Updated successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Updated failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowDelete: oldData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(oldData[primary])\n\n          await query.remove()\n\n          // show notice\n          await notice({ title: `Deleted successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Deleted failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}