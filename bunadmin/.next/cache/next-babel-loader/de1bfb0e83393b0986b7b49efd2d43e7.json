{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport rxInitData from \"@/utils/database/rxInitData\";\nimport { Collection as Setting, SettingNames } from \"@/core/setting/collections\";\nimport initDocsData from \"@/utils/database/rxInitData/initDocsData\";\nimport requirePlugins from \"@/utils/scripts/requirePlugins\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Primary as AuthPrimary } from \"@/core/auth/schema\";\nimport { ENV } from \"@/utils/config\";\nexport default function initData() {\n  return _initData.apply(this, arguments);\n}\n\nfunction _initData() {\n  _initData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var db, pluginsData;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return rxDb();\n\n          case 2:\n            db = _context4.sent;\n            _context4.next = 5;\n            return rxInitData({\n              db: db,\n              collection: Setting.name,\n              name: SettingNames.init_status,\n              initFunc: function initFunc() {\n                return initDocsData({\n                  db: db,\n                  collection: Setting.name,\n                  docsData: [{\n                    name: SettingNames.i18n_code,\n                    value: ENV.I18N_CODE\n                  }, {\n                    name: AuthPrimary,\n                    // username\n                    value: undefined\n                  }, {\n                    name: SettingNames.role,\n                    value: undefined\n                  }, {\n                    name: SettingNames.site_name,\n                    value: undefined\n                  }, {\n                    name: SettingNames.theme,\n                    value: undefined\n                  }]\n                });\n              }\n            });\n\n          case 5:\n            // Init Plugins Data\n            pluginsData = require(\"@plugins/pluginsData\");\n            pluginsData.map( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path) {\n                var fileContent, initData;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        fileContent = requirePlugins(path);\n\n                        if (fileContent) {\n                          _context3.next = 3;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\");\n\n                      case 3:\n                        initData = fileContent[\"default\"]; // Init Plugin's Data\n\n                        _context3.next = 6;\n                        return rxInitData({\n                          db: db,\n                          collection: Setting.name,\n                          name: \"init-\".concat(initData.plugin),\n                          initFunc: function () {\n                            var _initFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                while (1) {\n                                  switch (_context2.prev = _context2.next) {\n                                    case 0:\n                                      // Loop init DocsData\n                                      initData.list.map( /*#__PURE__*/function () {\n                                        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {\n                                          return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                            while (1) {\n                                              switch (_context.prev = _context.next) {\n                                                case 0:\n                                                  _context.next = 2;\n                                                  return initDocsData({\n                                                    db: db,\n                                                    collection: item.name,\n                                                    docsData: item.data\n                                                  });\n\n                                                case 2:\n                                                case \"end\":\n                                                  return _context.stop();\n                                              }\n                                            }\n                                          }, _callee);\n                                        }));\n\n                                        return function (_x2) {\n                                          return _ref2.apply(this, arguments);\n                                        };\n                                      }());\n\n                                    case 1:\n                                    case \"end\":\n                                      return _context2.stop();\n                                  }\n                                }\n                              }, _callee2);\n                            }));\n\n                            function initFunc() {\n                              return _initFunc.apply(this, arguments);\n                            }\n\n                            return initFunc;\n                          }()\n                        });\n\n                      case 6:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _initData.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/scripts/initData.tsx"],"names":["rxInitData","Collection","Setting","SettingNames","initDocsData","requirePlugins","rxDb","Primary","AuthPrimary","ENV","initData","db","collection","name","init_status","initFunc","docsData","i18n_code","value","I18N_CODE","undefined","role","site_name","theme","pluginsData","require","map","path","fileContent","plugin","list","item","data"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,SAASC,UAAU,IAAIC,OAAvB,EAAgCC,YAAhC,QAAoD,4BAApD;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,oBAAvC;AACA,SAASC,GAAT,QAAoB,gBAApB;AAUA,wBAA8BC,QAA9B;AAAA;AAAA;;;uEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIJ,IAAI,EADR;;AAAA;AACPK,YAAAA,EADO;AAAA;AAAA,mBAIPX,UAAU,CAAC;AACfW,cAAAA,EAAE,EAAFA,EADe;AAEfC,cAAAA,UAAU,EAAEV,OAAO,CAACW,IAFL;AAGfA,cAAAA,IAAI,EAAEV,YAAY,CAACW,WAHJ;AAIfC,cAAAA,QAAQ,EAAE;AAAA,uBACRX,YAAY,CAAC;AACXO,kBAAAA,EAAE,EAAFA,EADW;AAEXC,kBAAAA,UAAU,EAAEV,OAAO,CAACW,IAFT;AAGXG,kBAAAA,QAAQ,EAAE,CACR;AACEH,oBAAAA,IAAI,EAAEV,YAAY,CAACc,SADrB;AAEEC,oBAAAA,KAAK,EAAET,GAAG,CAACU;AAFb,mBADQ,EAKR;AACEN,oBAAAA,IAAI,EAAEL,WADR;AACqB;AACnBU,oBAAAA,KAAK,EAAEE;AAFT,mBALQ,EASR;AACEP,oBAAAA,IAAI,EAAEV,YAAY,CAACkB,IADrB;AAEEH,oBAAAA,KAAK,EAAEE;AAFT,mBATQ,EAaR;AACEP,oBAAAA,IAAI,EAAEV,YAAY,CAACmB,SADrB;AAEEJ,oBAAAA,KAAK,EAAEE;AAFT,mBAbQ,EAiBR;AACEP,oBAAAA,IAAI,EAAEV,YAAY,CAACoB,KADrB;AAEEL,oBAAAA,KAAK,EAAEE;AAFT,mBAjBQ;AAHC,iBAAD,CADJ;AAAA;AAJK,aAAD,CAJH;;AAAA;AAqCb;AACMI,YAAAA,WAtCO,GAsCOC,OAAO,CAAC,sBAAD,CAtCd;AAuCbD,YAAAA,WAAW,CAACE,GAAZ;AAAA,kFAAgB,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,wBAAAA,WADQ,GACWvB,cAAc,CAACsB,IAAD,CADzB;;AAAA,4BAGTC,WAHS;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKRlB,wBAAAA,QALQ,GAKakB,WAAW,WALxB,EAOd;;AAPc;AAAA,+BAQR5B,UAAU,CAAC;AACfW,0BAAAA,EAAE,EAAFA,EADe;AAEfC,0BAAAA,UAAU,EAAEV,OAAO,CAACW,IAFL;AAGfA,0BAAAA,IAAI,iBAAUH,QAAQ,CAACmB,MAAnB,CAHW;AAIfd,0BAAAA,QAAQ;AAAA,qGAAE;AAAA;AAAA;AAAA;AAAA;AACR;AACAL,sCAAAA,QAAQ,CAACoB,IAAT,CAAcJ,GAAd;AAAA,6GAAkB,iBAAMK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDACV3B,YAAY,CAAC;AACjBO,oDAAAA,EAAE,EAAFA,EADiB;AAEjBC,oDAAAA,UAAU,EAAEmB,IAAI,CAAClB,IAFA;AAGjBG,oDAAAA,QAAQ,EAAEe,IAAI,CAACC;AAHE,mDAAD,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAlB;;AAAA;AAAA;AAAA;AAAA;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAJO,yBAAD,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhB;;AAAA;AAAA;AAAA;AAAA;;AAvCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import rxInitData from \"@/utils/database/rxInitData\"\nimport { Collection as Setting, SettingNames } from \"@/core/setting/collections\"\nimport initDocsData from \"@/utils/database/rxInitData/initDocsData\"\nimport requirePlugins from \"@/utils/scripts/requirePlugins\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Primary as AuthPrimary } from \"@/core/auth/schema\"\nimport { ENV } from \"@/utils/config\"\n\ninterface InitData {\n  plugin: string\n  list: {\n    name: string\n    data: any\n  }[]\n}\n\nexport default async function initData() {\n  const db = await rxDb()\n\n  // Init Core Setting Data\n  await rxInitData({\n    db,\n    collection: Setting.name,\n    name: SettingNames.init_status,\n    initFunc: () =>\n      initDocsData({\n        db,\n        collection: Setting.name,\n        docsData: [\n          {\n            name: SettingNames.i18n_code,\n            value: ENV.I18N_CODE\n          },\n          {\n            name: AuthPrimary, // username\n            value: undefined\n          },\n          {\n            name: SettingNames.role,\n            value: undefined\n          },\n          {\n            name: SettingNames.site_name,\n            value: undefined\n          },\n          {\n            name: SettingNames.theme,\n            value: undefined\n          }\n        ]\n      })\n  })\n\n  // Init Plugins Data\n  const pluginsData = require(\"@plugins/pluginsData\")\n  pluginsData.map(async (path: string) => {\n    const fileContent: any = requirePlugins(path)\n\n    if (!fileContent) return\n\n    const initData: InitData = fileContent.default\n\n    // Init Plugin's Data\n    await rxInitData({\n      db,\n      collection: Setting.name,\n      name: `init-${initData.plugin}`,\n      initFunc: async () => {\n        // Loop init DocsData\n        initData.list.map(async item => {\n          await initDocsData({\n            db,\n            collection: item.name,\n            docsData: item.data\n          })\n        })\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}