{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nimport { notice } from \"@/core\";\nexport function editableController() {\n  const collection = Collection.name;\n  const primary = Primary;\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: newData => new Promise(async resolve => {\n      try {\n        const db = await rxDb();\n        const parent = newData.parent || \"\";\n        await db[collection].insert(_objectSpread(_objectSpread({}, newData), {}, {\n          parent\n        })); // show notice\n\n        await notice({\n          title: `Created successful`\n        });\n      } catch (e) {\n        console.error(e); // console.log(e.parameters.errors.toString())\n        // show notice\n\n        await notice({\n          title: `Created failed`,\n          severity: \"error\",\n          content: e.toString()\n        });\n      }\n\n      resolve();\n    }),\n    onRowUpdate: newData => new Promise(async resolve => {\n      try {\n        const db = await rxDb();\n        const query = db[collection].findOne().where(primary).eq(newData[primary]);\n        await query.update({\n          $set: newData\n        }); // show notice\n\n        await notice({\n          title: `Updated successful`\n        });\n      } catch (e) {\n        console.error(e); // show notice\n\n        await notice({\n          title: `Updated failed`,\n          severity: \"error\",\n          content: e.toString()\n        });\n      }\n\n      resolve();\n    }),\n    onRowDelete: oldData => new Promise(async resolve => {\n      try {\n        const db = await rxDb();\n        const query = db[collection].findOne().where(primary).eq(oldData[primary]);\n        await query.remove(); // show notice\n\n        await notice({\n          title: `Deleted successful`\n        });\n      } catch (e) {\n        console.error(e); // show notice\n\n        await notice({\n          title: `Deleted failed`,\n          severity: \"error\",\n          content: e.toString()\n        });\n      }\n\n      resolve();\n    })\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/menu/controllers/editableController.tsx"],"names":["rxDb","Collection","Primary","notice","editableController","collection","name","primary","onRowAdd","newData","Promise","resolve","db","parent","insert","title","e","console","error","severity","content","toString","onRowUpdate","query","findOne","where","eq","update","$set","onRowDelete","oldData","remove"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,4BAAjB;AAGA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,SAASC,kBAAT,GAAsD;AAC3D,QAAMC,UAAU,GAAGJ,UAAU,CAACK,IAA9B;AACA,QAAMC,OAAO,GAAGL,OAAhB;AAEA,SAAO;AACL;AACA;AACAM,IAAAA,QAAQ,EAAEC,OAAO,IACf,IAAIC,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAC3B,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMZ,IAAI,EAArB;AACA,cAAMa,MAAM,GAAGJ,OAAO,CAACI,MAAR,IAAkB,EAAjC;AAEA,cAAMD,EAAE,CAACP,UAAD,CAAF,CAAeS,MAAf,iCAA2BL,OAA3B;AAAoCI,UAAAA;AAApC,WAAN,CAJE,CAMF;;AACA,cAAMV,MAAM,CAAC;AAAEY,UAAAA,KAAK,EAAG;AAAV,SAAD,CAAZ;AACD,OARD,CAQE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd,EADU,CAEV;AAEA;;AACA,cAAMb,MAAM,CAAC;AACXY,UAAAA,KAAK,EAAG,gBADG;AAEXI,UAAAA,QAAQ,EAAE,OAFC;AAGXC,UAAAA,OAAO,EAAEJ,CAAC,CAACK,QAAF;AAHE,SAAD,CAAZ;AAKD;;AAEDV,MAAAA,OAAO;AACR,KAtBD,CAJG;AA2BLW,IAAAA,WAAW,EAAEb,OAAO,IAClB,IAAIC,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAC3B,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMZ,IAAI,EAArB;AAEA,cAAMuB,KAAK,GAAGX,EAAE,CAACP,UAAD,CAAF,CACXmB,OADW,GAEXC,KAFW,CAELlB,OAFK,EAGXmB,EAHW,CAGRjB,OAAO,CAACF,OAAD,CAHC,CAAd;AAKA,cAAMgB,KAAK,CAACI,MAAN,CAAa;AACjBC,UAAAA,IAAI,EAAEnB;AADW,SAAb,CAAN,CARE,CAYF;;AACA,cAAMN,MAAM,CAAC;AAAEY,UAAAA,KAAK,EAAG;AAAV,SAAD,CAAZ;AACD,OAdD,CAcE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd,EADU,CAGV;;AACA,cAAMb,MAAM,CAAC;AACXY,UAAAA,KAAK,EAAG,gBADG;AAEXI,UAAAA,QAAQ,EAAE,OAFC;AAGXC,UAAAA,OAAO,EAAEJ,CAAC,CAACK,QAAF;AAHE,SAAD,CAAZ;AAKD;;AAEDV,MAAAA,OAAO;AACR,KA3BD,CA5BG;AAwDLkB,IAAAA,WAAW,EAAEC,OAAO,IAClB,IAAIpB,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAC3B,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMZ,IAAI,EAArB;AAEA,cAAMuB,KAAK,GAAGX,EAAE,CAACP,UAAD,CAAF,CACXmB,OADW,GAEXC,KAFW,CAELlB,OAFK,EAGXmB,EAHW,CAGRI,OAAO,CAACvB,OAAD,CAHC,CAAd;AAKA,cAAMgB,KAAK,CAACQ,MAAN,EAAN,CARE,CAUF;;AACA,cAAM5B,MAAM,CAAC;AAAEY,UAAAA,KAAK,EAAG;AAAV,SAAD,CAAZ;AACD,OAZD,CAYE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd,EADU,CAGV;;AACA,cAAMb,MAAM,CAAC;AACXY,UAAAA,KAAK,EAAG,gBADG;AAEXI,UAAAA,QAAQ,EAAE,OAFC;AAGXC,UAAAA,OAAO,EAAEJ,CAAC,CAACK,QAAF;AAHE,SAAD,CAAZ;AAKD;;AAEDV,MAAAA,OAAO;AACR,KAzBD;AAzDG,GAAP;AAoFD","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport { Type } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\nimport { notice } from \"@/core\"\n\nexport function editableController(): EditableDataType<Type> {\n  const collection = Collection.name\n  const primary = Primary\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: newData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n          const parent = newData.parent || \"\"\n\n          await db[collection].insert({ ...newData, parent })\n\n          // show notice\n          await notice({ title: `Created successful` })\n        } catch (e) {\n          console.error(e)\n          // console.log(e.parameters.errors.toString())\n\n          // show notice\n          await notice({\n            title: `Created failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowUpdate: newData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(newData[primary])\n\n          await query.update({\n            $set: newData\n          })\n\n          // show notice\n          await notice({ title: `Updated successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Updated failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowDelete: oldData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(oldData[primary])\n\n          await query.remove()\n\n          // show notice\n          await notice({ title: `Deleted successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Deleted failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}