{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport rxDb from \"./rxConnect\";\nexport default function rxSubscribe(_x) {\n  return _rxSubscribe.apply(this, arguments);\n}\n\nfunction _rxSubscribe() {\n  _rxSubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var collection, where, sort, callback, db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            collection = _ref.collection, where = _ref.where, sort = _ref.sort, callback = _ref.callback;\n            _context.next = 3;\n            return rxDb();\n\n          case 3:\n            db = _context.sent;\n            db[collection].find().where(where || {}).sort(sort || {}).$.subscribe(function (data) {\n              if (!data) return;\n              callback(data);\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _rxSubscribe.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/database/rxSubscribe.tsx"],"names":["rxDb","rxSubscribe","collection","where","sort","callback","db","find","$","subscribe","data"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AASA,wBAA8BC,WAA9B;AAAA;AAAA;;;0EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,UADa,QACbA,UADa,EAEbC,KAFa,QAEbA,KAFa,EAGbC,IAHa,QAGbA,IAHa,EAIbC,QAJa,QAIbA,QAJa;AAAA;AAAA,mBAMIL,IAAI,EANR;;AAAA;AAMPM,YAAAA,EANO;AAObA,YAAAA,EAAE,CAACJ,UAAD,CAAF,CACGK,IADH,GAEGJ,KAFH,CAESA,KAAK,IAAI,EAFlB,EAGGC,IAHH,CAGQA,IAAI,IAAI,EAHhB,EAIGI,CAJH,CAIKC,SAJL,CAIe,UAACC,IAAD,EAAe;AAC1B,kBAAI,CAACA,IAAL,EAAW;AACXL,cAAAA,QAAQ,CAACK,IAAD,CAAR;AACD,aAPH;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import rxDb from \"./rxConnect\"\n\ninterface RxSubscribeProps {\n  collection: string\n  sort?: any\n  where?: any\n  callback: (data: any) => void\n}\n\nexport default async function rxSubscribe({\n  collection,\n  where,\n  sort,\n  callback\n}: RxSubscribeProps) {\n  const db = await rxDb()\n  db[collection]\n    .find()\n    .where(where || {})\n    .sort(sort || {})\n    .$.subscribe((data: any) => {\n      if (!data) return\n      callback(data)\n    })\n}\n"]},"metadata":{},"sourceType":"module"}