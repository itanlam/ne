{"ast":null,"code":"var _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { MTableToolbar } from \"material-table\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\";\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\";\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\";\nimport { Columns } from \"./columns\";\nimport { Schema } from \"./schema\";\nimport { Data } from \"./data\";\nimport EvaIcon from \"react-eva-icons\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { fsDownload } from \"@/utils/scripts/fs\";\n// @ts-ignore\nimport JSONInput from \"react-json-editor-ajrm\"; // @ts-ignore\n\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport MigrationDialogs from \"./components/Dialog\";\nimport { useTranslation } from \"react-i18next\";\nexport default function MigrationContainer() {\n  const {\n    t\n  } = useTranslation(\"table\");\n  const theme = useTheme();\n  const color = theme.bunadmin.iconColor;\n  const {\n    0: selData,\n    1: setSelData\n  } = useState({\n    name: \"schema\",\n    mode: \"Export\"\n  });\n  const {\n    0: modalState,\n    1: setModalState\n  } = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  });\n  const {\n    0: uploadModal,\n    1: setUploadModal\n  } = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  });\n  return __jsx(React.Fragment, null, __jsx(React.Fragment, null, __jsx(CommonTableHead, {\n    title: t(Schema.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), __jsx(CommonTable, {\n    title: t(Schema.title),\n    columns: Columns({\n      t\n    }),\n    data: Data({\n      t\n    }) // style\n    ,\n    style: DefaultProps.style // icons\n    ,\n    icons: tableIcons({\n      theme\n    }) // options\n    ,\n    options: _objectSpread(_objectSpread({}, DefaultProps.options), {}, {\n      selection: false\n    }) // actions\n    ,\n    actions: [{\n      tooltip: \"Export\",\n      icon: () => __jsx(EvaIcon, {\n        name: \"download-outline\",\n        size: \"large\",\n        fill: color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }),\n      onClick: async (_evt, data) => {\n        if (!(\"name\" in data)) return;\n        const db = await rxDb();\n        const collection = data.name;\n        db[collection].dump().then(json => fsDownload(json, collection, \"application/json\"));\n      }\n    }, {\n      tooltip: \"Import\",\n      icon: () => __jsx(EvaIcon, {\n        name: \"upload-outline\",\n        size: \"large\",\n        fill: color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }),\n      onClick: async (_evt, data) => {\n        if (!(\"name\" in data)) return;\n        const msg = `Do you want to restore ${data.name}?`;\n        setUploadModal({\n          title: \"Import / Restore\",\n          open: uploadModal.open + 1,\n          msg\n        });\n        setSelData({\n          name: data.name,\n          mode: \"Export DB\"\n        });\n      }\n    }],\n    components: {\n      Toolbar: props => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }, __jsx(MTableToolbar, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      })), __jsx(\"div\", {\n        style: {\n          padding: \"0px 10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, __jsx(IconButton, {\n        \"aria-label\": \"account of current user\",\n        \"aria-controls\": \"menu-appbar\",\n        \"aria-haspopup\": \"true\",\n        onClick: () => {\n          const msg = \"Do you want to backup Local Database?\";\n          setModalState({\n            title: \"Clone / Backup\",\n            open: modalState.open + 1,\n            msg\n          });\n          setSelData({\n            name: \"Database\",\n            mode: \"Export DB\"\n          });\n        },\n        color: \"inherit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }\n      }, __jsx(EvaIcon, {\n        name: \"save-outline\",\n        size: \"large\",\n        fill: theme.bunadmin.iconColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      })), __jsx(IconButton, {\n        \"aria-label\": \"account of current user\",\n        \"aria-controls\": \"menu-appbar\",\n        \"aria-haspopup\": \"true\",\n        onClick: () => {\n          const msg = \"Do you want to overwrite Local Database?\";\n          setUploadModal({\n            title: \"Restore Local Database\",\n            open: uploadModal.open + 1,\n            msg\n          });\n          setSelData({\n            name: \"ALL\",\n            mode: \"Import DB\"\n          });\n        },\n        color: \"inherit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 19\n        }\n      }, __jsx(EvaIcon, {\n        name: \"edit-2-outline\",\n        size: \"large\",\n        fill: theme.bunadmin.iconColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }\n      }))))\n    } // detailPanel\n    ,\n    detailPanel: [{\n      icon: \"code\",\n      render: rowData => {\n        if (!rowData.columns) {\n          return __jsx(\"div\", {\n            style: {\n              color: \"white\",\n              backgroundColor: theme.bunadmin.iconColor,\n              padding: \"10px 30px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }\n          }, rowData.columns || \"COLUMNS IS EMPTY\");\n        } else {\n          const json = rowData.columns || {};\n          return __jsx(JSONInput, {\n            viewOnly: true,\n            theme: \"light_mitsuketa_tribute\",\n            placeholder: json,\n            locale: locale,\n            style: {\n              outerBox: {\n                width: \"100%\"\n              },\n              container: {\n                width: \"100%\",\n                fontSize: 14\n              }\n            },\n            colors: {\n              background: theme.bunadmin.jsonViewBg,\n              default: theme.palette.primary.light\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }\n          });\n        } // check columns\n\n      } // render\n\n    } // item\n    ],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), __jsx(MigrationDialogs, {\n    selData: selData,\n    modalState: modalState,\n    uploadModal: uploadModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/index.tsx"],"names":["React","useState","MTableToolbar","useTheme","CommonTableDefaultProps","DefaultProps","CommonTable","CommonTableHead","tableIcons","Columns","Schema","Data","EvaIcon","rxDb","IconButton","fsDownload","JSONInput","locale","MigrationDialogs","useTranslation","MigrationContainer","t","theme","color","bunadmin","iconColor","selData","setSelData","name","mode","modalState","setModalState","open","title","msg","uploadModal","setUploadModal","style","options","selection","tooltip","icon","onClick","_evt","data","db","collection","dump","then","json","Toolbar","props","padding","render","rowData","columns","backgroundColor","outerBox","width","container","fontSize","background","jsonViewBg","default","palette","primary","light"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nimport { MTableToolbar } from \"material-table\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\"\n\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\"\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\"\nimport { Columns } from \"./columns\"\nimport { Schema } from \"./schema\"\nimport { Data } from \"./data\"\nimport EvaIcon from \"react-eva-icons\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { fsDownload } from \"@/utils/scripts/fs\"\nimport { Type } from \"./types\"\n// @ts-ignore\nimport JSONInput from \"react-json-editor-ajrm\"\n// @ts-ignore\nimport locale from \"react-json-editor-ajrm/locale/en\"\nimport MigrationDialogs from \"./components/Dialog\"\nimport { useTranslation } from \"react-i18next\"\n\nexport default function MigrationContainer() {\n  const { t } = useTranslation(\"table\")\n  const theme = useTheme()\n  const color: string = theme.bunadmin.iconColor\n  const [selData, setSelData] = useState({\n    name: \"schema\",\n    mode: \"Export\"\n  })\n  const [modalState, setModalState] = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  })\n  const [uploadModal, setUploadModal] = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  })\n\n  return (\n    <>\n      <>\n        <CommonTableHead title={t(Schema.title)} />\n        <CommonTable\n          title={t(Schema.title)}\n          columns={Columns({ t })}\n          data={Data({ t }) as any}\n          // style\n          style={DefaultProps.style}\n          // icons\n          icons={tableIcons({ theme })}\n          // options\n          options={{ ...DefaultProps.options, selection: false }}\n          // actions\n          actions={[\n            {\n              tooltip: \"Export\",\n              icon: () => (\n                <EvaIcon name=\"download-outline\" size=\"large\" fill={color} />\n              ),\n              onClick: async (_evt, data: Type[] | Type) => {\n                if (!(\"name\" in data)) return\n                const db = await rxDb()\n                const collection = data.name\n                db[collection]\n                  .dump()\n                  .then((json: any) =>\n                    fsDownload(json, collection, \"application/json\")\n                  )\n              }\n            },\n            {\n              tooltip: \"Import\",\n              icon: () => (\n                <EvaIcon name=\"upload-outline\" size=\"large\" fill={color} />\n              ),\n              onClick: async (_evt, data: Type[] | Type) => {\n                if (!(\"name\" in data)) return\n                const msg = `Do you want to restore ${data.name}?`\n                setUploadModal({\n                  title: \"Import / Restore\",\n                  open: uploadModal.open + 1,\n                  msg\n                })\n                setSelData({\n                  name: data.name,\n                  mode: \"Export DB\"\n                })\n              }\n            }\n          ]}\n          components={{\n            Toolbar: props => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: \"0px 10px\" }}>\n                  <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => {\n                      const msg = \"Do you want to backup Local Database?\"\n                      setModalState({\n                        title: \"Clone / Backup\",\n                        open: modalState.open + 1,\n                        msg\n                      })\n                      setSelData({\n                        name: \"Database\",\n                        mode: \"Export DB\"\n                      })\n                    }}\n                    color=\"inherit\"\n                  >\n                    <EvaIcon\n                      name=\"save-outline\"\n                      size=\"large\"\n                      fill={theme.bunadmin.iconColor}\n                    />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => {\n                      const msg = \"Do you want to overwrite Local Database?\"\n                      setUploadModal({\n                        title: \"Restore Local Database\",\n                        open: uploadModal.open + 1,\n                        msg\n                      })\n                      setSelData({\n                        name: \"ALL\",\n                        mode: \"Import DB\"\n                      })\n                    }}\n                    color=\"inherit\"\n                  >\n                    <EvaIcon\n                      name=\"edit-2-outline\"\n                      size=\"large\"\n                      fill={theme.bunadmin.iconColor}\n                    />\n                  </IconButton>\n                </div>\n              </div>\n            )\n          }}\n          // detailPanel\n          detailPanel={[\n            {\n              icon: \"code\",\n              render: rowData => {\n                if (!rowData.columns) {\n                  return (\n                    <div\n                      style={{\n                        color: \"white\",\n                        backgroundColor: theme.bunadmin.iconColor,\n                        padding: \"10px 30px\"\n                      }}\n                    >\n                      {rowData.columns || \"COLUMNS IS EMPTY\"}\n                    </div>\n                  )\n                } else {\n                  const json = rowData.columns || {}\n                  return (\n                    <JSONInput\n                      viewOnly\n                      theme=\"light_mitsuketa_tribute\"\n                      placeholder={json}\n                      locale={locale}\n                      style={{\n                        outerBox: { width: \"100%\" },\n                        container: { width: \"100%\", fontSize: 14 }\n                      }}\n                      colors={{\n                        background: theme.bunadmin.jsonViewBg,\n                        default: theme.palette.primary.light\n                      }}\n                    />\n                  )\n                } // check columns\n              } // render\n            } // item\n          ]}\n        />\n      </>\n      <MigrationDialogs\n        selData={selData}\n        modalState={modalState}\n        uploadModal={uploadModal}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}