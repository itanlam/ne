{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport userSignInService from \"../services/signInService\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection as Setting } from \"@/core/setting/collections\";\nimport { Collection as Auth } from \"@/core/auth/collections\";\nimport { Primary } from \"@/core/auth/schema\";\nimport { DynamicRoute } from \"@/utils/routes\";\nimport { notice } from \"@/core\";\n\nvar submitController = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var t, values, setSubmitting, router, res, _db$Auth$name$upsert, primary, updated_at, db, asPath, pathArr, redirect, regex, matchStr, isMatch;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            t = _ref.t, values = _ref.values, setSubmitting = _ref.setSubmitting, router = _ref.router;\n            _context.next = 3;\n            return userSignInService(values);\n\n          case 3:\n            res = _context.sent;\n            setSubmitting(false); // Sign-in successfully\n\n            if (!(res && res.token)) {\n              _context.next = 26;\n              break;\n            }\n\n            // store user profile\n            primary = Primary;\n            updated_at = Date.now();\n            _context.next = 10;\n            return rxDb();\n\n          case 10:\n            db = _context.sent;\n            _context.next = 13;\n            return db[Auth.name].upsert((_db$Auth$name$upsert = {}, _defineProperty(_db$Auth$name$upsert, primary, res.username), _defineProperty(_db$Auth$name$upsert, \"token\", res.token), _defineProperty(_db$Auth$name$upsert, \"role\", res.role), _defineProperty(_db$Auth$name$upsert, \"details\", JSON.stringify(res)), _defineProperty(_db$Auth$name$upsert, \"updated_at\", updated_at), _db$Auth$name$upsert));\n\n          case 13:\n            _context.next = 15;\n            return db[Setting.name].upsert({\n              name: Primary,\n              value: res[Primary],\n              updated_at: Date.now()\n            });\n\n          case 15:\n            _context.next = 17;\n            return notice({\n              title: t(\"Sign in successful\")\n            });\n\n          case 17:\n            // push to origin url\n            asPath = router.asPath;\n            pathArr = asPath.split(\"?redirect=\");\n            redirect = pathArr[1] || \"/\";\n            regex = /\\//g;\n            matchStr = redirect.match(regex) || []; // is match /[group]/[name]\n\n            isMatch = matchStr.length === 2;\n\n            if (regex && isMatch) {\n              router.replace(DynamicRoute, redirect).then(function (_r) {});\n            } else {\n              router.replace(redirect).then(function (_r) {});\n            }\n\n            _context.next = 28;\n            break;\n\n          case 26:\n            _context.next = 28;\n            return notice({\n              title: t(\"Sign in failed\"),\n              severity: \"error\",\n              content: JSON.stringify(res)\n            });\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function submitController(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default submitController;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/buncms-user/sign-in/controllers/submitController.tsx"],"names":["userSignInService","rxDb","Collection","Setting","Auth","Primary","DynamicRoute","notice","submitController","t","values","setSubmitting","router","res","token","primary","updated_at","Date","now","db","name","upsert","username","role","JSON","stringify","value","title","asPath","pathArr","split","redirect","regex","matchStr","match","isMatch","length","replace","then","_r","severity","content"],"mappings":"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","sourcesContent":["import { Values } from \"../types\"\nimport userSignInService from \"../services/signInService\"\n\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Collection as Setting } from \"@/core/setting/collections\"\nimport { Collection as Auth } from \"@/core/auth/collections\"\nimport { Primary } from \"@/core/auth/schema\"\nimport { DynamicRoute } from \"@/utils/routes\"\nimport { NextRouter } from \"next/router\"\nimport { notice } from \"@/core\"\nimport { TFunction } from \"i18next\"\n\ninterface Props {\n  t: TFunction\n  values: Values\n  setSubmitting: (isSubmitting: boolean) => void\n  router: NextRouter\n}\n\nconst submitController = async ({\n  t,\n  values,\n  setSubmitting,\n  router\n}: Props) => {\n  const res = await userSignInService(values)\n  setSubmitting(false)\n  // Sign-in successfully\n  if (res && res.token) {\n    // store user profile\n    const primary = Primary\n    const updated_at = Date.now()\n\n    const db = await rxDb()\n    // store auth\n    await db[Auth.name].upsert({\n      [primary]: res.username,\n      token: res.token,\n      role: res.role,\n      details: JSON.stringify(res),\n      updated_at\n    })\n    // update username in setting\n    await db[Setting.name].upsert({\n      name: Primary,\n      value: res[Primary],\n      updated_at: Date.now()\n    })\n    // show notice\n    await notice({ title: t(\"Sign in successful\") })\n    // push to origin url\n    const { asPath } = router\n    const pathArr = asPath.split(\"?redirect=\")\n    const redirect = pathArr[1] || \"/\"\n    const regex = /\\//g\n    const matchStr: RegExpMatchArray = redirect.match(regex) || []\n    // is match /[group]/[name]\n    const isMatch = matchStr.length === 2\n\n    if (regex && isMatch) {\n      router.replace(DynamicRoute, redirect).then(_r => {})\n    } else {\n      router.replace(redirect).then(_r => {})\n    }\n  } else {\n    // show notice\n    await notice({\n      title: t(\"Sign in failed\"),\n      severity: \"error\",\n      content: JSON.stringify(res)\n    })\n  }\n}\n\nexport default submitController\n"]},"metadata":{},"sourceType":"module"}