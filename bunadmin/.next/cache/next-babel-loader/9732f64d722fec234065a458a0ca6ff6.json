{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Remote data controller\n */\nimport { notice } from \"@/core\";\nimport listSer from \"../services/listSer\";\nexport default function dataCtrl(_x) {\n  return _dataCtrl.apply(this, arguments);\n}\n\nfunction _dataCtrl() {\n  _dataCtrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, SchemaName, _yield$listSer, data, errors, totalCount;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query, SchemaName = _ref.SchemaName;\n            _context.next = 3;\n            return listSer({\n              query: query,\n              SchemaName: SchemaName\n            });\n\n          case 3:\n            _yield$listSer = _context.sent;\n            data = _yield$listSer.data;\n            errors = _yield$listSer.errors;\n            totalCount = _yield$listSer.totalCount;\n\n            if (!errors) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return notice({\n              title: \"Fetch error\",\n              severity: \"error\",\n              content: JSON.stringify(errors)\n            });\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              page: query.page,\n              data: [],\n              totalCount: 0\n            });\n\n          case 11:\n            return _context.abrupt(\"return\", {\n              page: query.page,\n              data: data,\n              totalCount: totalCount\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _dataCtrl.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/controllers/dataCtrl.tsx"],"names":["notice","listSer","dataCtrl","query","SchemaName","data","errors","totalCount","title","severity","content","JSON","stringify","page"],"mappings":";;;AAAA;;;AAGA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAGA,wBAA8BC,QAA9B;AAAA;AAAA;;;uEAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA0BC,YAAAA,KAA1B,QAA0BA,KAA1B,EAAiCC,UAAjC,QAAiCA,UAAjC;AAAA;AAAA,mBAC8BH,OAAO,CAAC;AAAEE,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,UAAU,EAAVA;AAAT,aAAD,CADrC;;AAAA;AAAA;AACLC,YAAAA,IADK,kBACLA,IADK;AACCC,YAAAA,MADD,kBACCA,MADD;AACSC,YAAAA,UADT,kBACSA,UADT;;AAAA,iBAGTD,MAHS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAILN,MAAM,CAAC;AACXQ,cAAAA,KAAK,EAAE,aADI;AAEXC,cAAAA,QAAQ,EAAE,OAFC;AAGXC,cAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AAHE,aAAD,CAJD;;AAAA;AAAA,6CASJ;AACLO,cAAAA,IAAI,EAAEV,KAAK,CAACU,IADP;AAELR,cAAAA,IAAI,EAAE,EAFD;AAGLE,cAAAA,UAAU,EAAE;AAHP,aATI;;AAAA;AAAA,6CAgBN;AACLM,cAAAA,IAAI,EAAEV,KAAK,CAACU,IADP;AAELR,cAAAA,IAAI,EAAJA,IAFK;AAGLE,cAAAA,UAAU,EAAEA;AAHP,aAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Remote data controller\n */\nimport { notice } from \"@/core\"\nimport listSer from \"../services/listSer\"\nimport { DataCtrl } from \"../types\"\n\nexport default async function dataCtrl({ query, SchemaName }: DataCtrl) {\n  const { data, errors, totalCount } = await listSer({ query, SchemaName })\n\n  if (errors) {\n    await notice({\n      title: \"Fetch error\",\n      severity: \"error\",\n      content: JSON.stringify(errors)\n    })\n    return {\n      page: query.page,\n      data: [],\n      totalCount: 0\n    }\n  }\n\n  return {\n    page: query.page,\n    data,\n    totalCount: totalCount\n  }\n}\n"]},"metadata":{},"sourceType":"module"}