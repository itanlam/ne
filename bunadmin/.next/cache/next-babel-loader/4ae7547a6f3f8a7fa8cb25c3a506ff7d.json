{"ast":null,"code":"/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\";\nimport storedToken from \"@/utils/scripts/storedToken\";\nimport { ENV } from \"@/utils/config\";\nexport default async function listSer({\n  query,\n  SchemaName\n}) {\n  const {\n    search,\n    page,\n    pageSize\n  } = query; // const { search, page, pageSize, filters } = query\n  // todo filters\n\n  const token = await storedToken();\n  const defSearchField = \"name\";\n  let searchField = `${defSearchField}_contains`;\n  const params = {\n    [searchField]: search || \"\",\n    _limit: pageSize,\n    _sort: \"created_at:DESC\",\n    _start: page * pageSize\n  };\n  const data = await request(`/content-manager/explorer/application::${SchemaName}.${SchemaName}`, {\n    params,\n    prefix: ENV.AUTH_URL,\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const {\n    count\n  } = await request(`/content-manager/explorer/application::${SchemaName}.${SchemaName}/count`, {\n    params,\n    prefix: ENV.AUTH_URL,\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return {\n    data,\n    totalCount: count,\n    errors: data.status >= 400 ? \"Fetch error\" : undefined\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/data-source-strapi/services/listSer.tsx"],"names":["request","storedToken","ENV","listSer","query","SchemaName","search","page","pageSize","token","defSearchField","searchField","params","_limit","_sort","_start","data","prefix","AUTH_URL","method","headers","Authorization","count","totalCount","errors","status","undefined"],"mappings":"AAAA;;;AAGA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAGA,eAAe,eAAeC,OAAf,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAvB,EAAwD;AACrE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAA6BJ,KAAnC,CADqE,CAErE;AACA;;AACA,QAAMK,KAAK,GAAG,MAAMR,WAAW,EAA/B;AAEA,QAAMS,cAAc,GAAG,MAAvB;AAEA,MAAIC,WAAW,GAAI,GAAED,cAAe,WAApC;AAEA,QAAME,MAAM,GAAG;AACb,KAACD,WAAD,GAAeL,MAAM,IAAI,EADZ;AAEbO,IAAAA,MAAM,EAAEL,QAFK;AAGbM,IAAAA,KAAK,EAAE,iBAHM;AAIbC,IAAAA,MAAM,EAAER,IAAI,GAAGC;AAJF,GAAf;AAOA,QAAMQ,IAAI,GAAG,MAAMhB,OAAO,CACvB,0CAAyCK,UAAW,IAAGA,UAAW,EAD3C,EAExB;AACEO,IAAAA,MADF;AAEEK,IAAAA,MAAM,EAAEf,GAAG,CAACgB,QAFd;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASZ,KAAM;AADxB;AAJX,GAFwB,CAA1B;AAYA,QAAM;AAAEa,IAAAA;AAAF,MAAY,MAAMtB,OAAO,CAC5B,0CAAyCK,UAAW,IAAGA,UAAW,QADtC,EAE7B;AACEO,IAAAA,MADF;AAEEK,IAAAA,MAAM,EAAEf,GAAG,CAACgB,QAFd;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASZ,KAAM;AADxB;AAJX,GAF6B,CAA/B;AAYA,SAAO;AACLO,IAAAA,IADK;AAELO,IAAAA,UAAU,EAAED,KAFP;AAGLE,IAAAA,MAAM,EAAER,IAAI,CAACS,MAAL,IAAe,GAAf,GAAqB,aAArB,GAAqCC;AAHxC,GAAP;AAKD","sourcesContent":["/**\n * Remote data controller\n */\nimport request from \"@/utils/scripts/request\"\nimport storedToken from \"@/utils/scripts/storedToken\"\nimport { ENV } from \"@/utils/config\"\nimport { DataCtrl } from \"../types\"\n\nexport default async function listSer({ query, SchemaName }: DataCtrl) {\n  const { search, page, pageSize } = query\n  // const { search, page, pageSize, filters } = query\n  // todo filters\n  const token = await storedToken()\n\n  const defSearchField = \"name\"\n\n  let searchField = `${defSearchField}_contains`\n\n  const params = {\n    [searchField]: search || \"\",\n    _limit: pageSize,\n    _sort: \"created_at:DESC\",\n    _start: page * pageSize\n  }\n\n  const data = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}`,\n    {\n      params,\n      prefix: ENV.AUTH_URL,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  const { count } = await request(\n    `/content-manager/explorer/application::${SchemaName}.${SchemaName}/count`,\n    {\n      params,\n      prefix: ENV.AUTH_URL,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  )\n\n  return {\n    data,\n    totalCount: count,\n    errors: data.status >= 400 ? \"Fetch error\" : undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module"}