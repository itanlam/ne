{"ast":null,"code":"import React from \"react\";\nimport rxSubscribe from \"@/utils/database/rxSubscribe\";\nimport { Collection } from \"@/core/notice/collections\";\nimport { withSnackbar } from \"notistack\";\n\nfunction CommonSnackbar(props) {\n  React.useEffect(() => {\n    ;\n\n    (async () => {\n      await rxSubscribe({\n        collection: Collection.name,\n        sort: {\n          created_at: \"desc\"\n        },\n        callback: data => {\n          const item = data[0];\n          if (!item) return console.warn(\"no notices\");\n          const lastNoticeMS = Date.now() - item.created_at;\n          if (lastNoticeMS > 10000) return; // 10s\n\n          handleClick({\n            message: item.title\n          });\n        }\n      });\n    })();\n  }, []);\n\n  const handleClick = ({\n    message\n  }) => {\n    props.enqueueSnackbar(message, {\n      variant: \"success\"\n    });\n  };\n\n  return null;\n}\n\nexport default withSnackbar(CommonSnackbar);","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/components/CommonSnackbar/index.tsx"],"names":["React","rxSubscribe","Collection","withSnackbar","CommonSnackbar","props","useEffect","collection","name","sort","created_at","callback","data","item","console","warn","lastNoticeMS","Date","now","handleClick","message","title","enqueueSnackbar","variant"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAA0BC,YAA1B,QAAiE,WAAjE;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAAkD;AAChDL,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB;;AAAC,KAAC,YAAY;AACZ,YAAML,WAAW,CAAC;AAChBM,QAAAA,UAAU,EAAEL,UAAU,CAACM,IADP;AAEhBC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAFU;AAGhBC,QAAAA,QAAQ,EAAEC,IAAI,IAAI;AAChB,gBAAMC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAjB;AAEA,cAAI,CAACC,IAAL,EAAW,OAAOC,OAAO,CAACC,IAAR,CAAa,YAAb,CAAP;AACX,gBAAMC,YAAY,GAAGC,IAAI,CAACC,GAAL,KAAaL,IAAI,CAACH,UAAvC;AAEA,cAAIM,YAAY,GAAG,KAAnB,EAA0B,OANV,CAMiB;;AACjCG,UAAAA,WAAW,CAAC;AAAEC,YAAAA,OAAO,EAAEP,IAAI,CAACQ;AAAhB,WAAD,CAAX;AACD;AAXe,OAAD,CAAjB;AAaD,KAdA;AAeF,GAhBD,EAgBG,EAhBH;;AAkBA,QAAMF,WAAW,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAA+C;AACjEf,IAAAA,KAAK,CAACiB,eAAN,CAAsBF,OAAtB,EAA+B;AAC7BG,MAAAA,OAAO,EAAE;AADoB,KAA/B;AAGD,GAJD;;AAMA,SAAO,IAAP;AACD;;AAED,eAAepB,YAAY,CAACC,cAAD,CAA3B","sourcesContent":["import React from \"react\"\nimport rxSubscribe from \"@/utils/database/rxSubscribe\"\nimport { Collection } from \"@/core/notice/collections\"\nimport { SnackbarMessage, withSnackbar, WithSnackbarProps } from \"notistack\"\n\nfunction CommonSnackbar(props: WithSnackbarProps) {\n  React.useEffect(() => {\n    ;(async () => {\n      await rxSubscribe({\n        collection: Collection.name,\n        sort: { created_at: \"desc\" },\n        callback: data => {\n          const item = data[0]\n\n          if (!item) return console.warn(\"no notices\")\n          const lastNoticeMS = Date.now() - item.created_at\n\n          if (lastNoticeMS > 10000) return // 10s\n          handleClick({ message: item.title })\n        }\n      })\n    })()\n  }, [])\n\n  const handleClick = ({ message }: { message: SnackbarMessage }) => {\n    props.enqueueSnackbar(message, {\n      variant: \"success\"\n    })\n  }\n\n  return null\n}\n\nexport default withSnackbar(CommonSnackbar)\n"]},"metadata":{},"sourceType":"module"}