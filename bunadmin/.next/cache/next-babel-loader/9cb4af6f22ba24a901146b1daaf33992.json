{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport verify from \"./verify\";\nimport { DynamicRoute, UserRoute } from \"@/utils/routes\";\nvar delayMS = 600; // (ms) delay for animation\n\nvar isIgnoredPaths = function isIgnoredPaths(asPath) {\n  return asPath.indexOf(UserRoute.signIn) > -1;\n};\n\nfunction security(_x) {\n  return _security.apply(this, arguments);\n}\n\nfunction _security() {\n  _security = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var setReady, router, delayReady, asPath, userProfile, isVerified, toUrl;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            delayReady = function _delayReady() {\n              setTimeout(function () {\n                return setReady(true);\n              }, delayMS);\n            };\n\n            setReady = _ref.setReady, router = _ref.router;\n            asPath = router.asPath;\n\n            if (isIgnoredPaths(asPath)) {\n              delayReady();\n            }\n\n            _context.next = 6;\n            return verify();\n\n          case 6:\n            userProfile = _context.sent;\n            // Authentication rule (check profile & id exists)\n            isVerified = userProfile && userProfile.id;\n\n            if (isVerified) {\n              delayReady();\n            } else {\n              // const isIgnoredOrigins = asPath.indexOf(`?redirect=${asPath}`) > -1\n              toUrl = \"\".concat(UserRoute.signIn, \"?redirect=\").concat(asPath);\n              toUrl = toUrl.replace(\"?redirect=\".concat(UserRoute.signIn), \"\");\n              router.replace(DynamicRoute, toUrl).then(function (_r) {\n                return setReady(true);\n              });\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _security.apply(this, arguments);\n}\n\nexport default security;","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/plugins/buncms-user/utils/security.tsx"],"names":["verify","DynamicRoute","UserRoute","delayMS","isIgnoredPaths","asPath","indexOf","signIn","security","delayReady","setTimeout","setReady","router","userProfile","isVerified","id","toUrl","replace","then","_r"],"mappings":";;AAEA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AAEA,IAAMC,OAAO,GAAG,GAAhB,C,CAAoB;;AAOpB,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAoB;AACzC,SAAOA,MAAM,CAACC,OAAP,CAAeJ,SAAS,CAACK,MAAzB,IAAmC,CAAC,CAA3C;AACD,CAFD;;SAIeC,Q;;;;;uEAAf;AAAA,0BACWC,UADX;AAAA;AAAA;AAAA;AAAA;AACWA,YAAAA,UADX,0BACwB;AACpBC,cAAAA,UAAU,CAAC;AAAA,uBAAMC,QAAQ,CAAC,IAAD,CAAd;AAAA,eAAD,EAAuBR,OAAvB,CAAV;AACD,aAHH;;AAA0BQ,YAAAA,QAA1B,QAA0BA,QAA1B,EAAoCC,MAApC,QAAoCA,MAApC;AAIUP,YAAAA,MAJV,GAIqBO,MAJrB,CAIUP,MAJV;;AAME,gBAAID,cAAc,CAACC,MAAD,CAAlB,EAA4B;AAC1BI,cAAAA,UAAU;AACX;;AARH;AAAA,mBAU4BT,MAAM,EAVlC;;AAAA;AAUQa,YAAAA,WAVR;AAWE;AACMC,YAAAA,UAZR,GAYqBD,WAAW,IAAIA,WAAW,CAACE,EAZhD;;AAcE,gBAAID,UAAJ,EAAgB;AACdL,cAAAA,UAAU;AACX,aAFD,MAEO;AACL;AACIO,cAAAA,KAFC,aAEUd,SAAS,CAACK,MAFpB,uBAEuCF,MAFvC;AAGLW,cAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,qBAA2Bf,SAAS,CAACK,MAArC,GAA+C,EAA/C,CAAR;AACAK,cAAAA,MAAM,CAACK,OAAP,CAAehB,YAAf,EAA6Be,KAA7B,EAAoCE,IAApC,CAAyC,UAAAC,EAAE;AAAA,uBAAIR,QAAQ,CAAC,IAAD,CAAZ;AAAA,eAA3C;AACD;;AArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBA,eAAeH,QAAf","sourcesContent":["import { Dispatch, SetStateAction } from \"react\"\nimport { NextRouter } from \"next/router\"\nimport verify from \"./verify\"\nimport { DynamicRoute, UserRoute } from \"@/utils/routes\"\n\nconst delayMS = 600 // (ms) delay for animation\n\ninterface Props {\n  setReady: Dispatch<SetStateAction<boolean>>\n  router: NextRouter\n}\n\nconst isIgnoredPaths = (asPath: string) => {\n  return asPath.indexOf(UserRoute.signIn) > -1\n}\n\nasync function security({ setReady, router }: Props) {\n  function delayReady() {\n    setTimeout(() => setReady(true), delayMS)\n  }\n  const { asPath } = router\n\n  if (isIgnoredPaths(asPath)) {\n    delayReady()\n  }\n\n  const userProfile = await verify()\n  // Authentication rule (check profile & id exists)\n  const isVerified = userProfile && userProfile.id\n\n  if (isVerified) {\n    delayReady()\n  } else {\n    // const isIgnoredOrigins = asPath.indexOf(`?redirect=${asPath}`) > -1\n    let toUrl = `${UserRoute.signIn}?redirect=${asPath}`\n    toUrl = toUrl.replace(`?redirect=${UserRoute.signIn}`, \"\")\n    router.replace(DynamicRoute, toUrl).then(_r => setReady(true))\n  }\n}\n\nexport default security\n"]},"metadata":{},"sourceType":"module"}