{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Collection } from \"../collections\";\nimport { Primary } from \"../schema\";\nimport { notice } from \"@/core\";\nexport function editableController() {\n  var collection = Collection.name;\n  var primary = Primary;\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: function onRowAdd(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n          var db, parent;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return rxDb();\n\n                case 3:\n                  db = _context.sent;\n                  parent = newData.parent || \"\";\n                  _context.next = 7;\n                  return db[collection].insert(_objectSpread(_objectSpread({}, newData), {}, {\n                    parent: parent\n                  }));\n\n                case 7:\n                  _context.next = 9;\n                  return notice({\n                    title: \"Created successful\"\n                  });\n\n                case 9:\n                  _context.next = 16;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](0);\n                  console.error(_context.t0); // console.log(e.parameters.errors.toString())\n                  // show notice\n\n                  _context.next = 16;\n                  return notice({\n                    title: \"Created failed\",\n                    severity: \"error\",\n                    content: _context.t0.toString()\n                  });\n\n                case 16:\n                  resolve();\n\n                case 17:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 11]]);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    onRowUpdate: function onRowUpdate(newData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n          var db, query;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return rxDb();\n\n                case 3:\n                  db = _context2.sent;\n                  query = db[collection].findOne().where(primary).eq(newData[primary]);\n                  _context2.next = 7;\n                  return query.update({\n                    $set: newData\n                  });\n\n                case 7:\n                  _context2.next = 9;\n                  return notice({\n                    title: \"Updated successful\"\n                  });\n\n                case 9:\n                  _context2.next = 16;\n                  break;\n\n                case 11:\n                  _context2.prev = 11;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  console.error(_context2.t0); // show notice\n\n                  _context2.next = 16;\n                  return notice({\n                    title: \"Updated failed\",\n                    severity: \"error\",\n                    content: _context2.t0.toString()\n                  });\n\n                case 16:\n                  resolve();\n\n                case 17:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 11]]);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    onRowDelete: function onRowDelete(oldData) {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resolve) {\n          var db, query;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return rxDb();\n\n                case 3:\n                  db = _context3.sent;\n                  query = db[collection].findOne().where(primary).eq(oldData[primary]);\n                  _context3.next = 7;\n                  return query.remove();\n\n                case 7:\n                  _context3.next = 9;\n                  return notice({\n                    title: \"Deleted successful\"\n                  });\n\n                case 9:\n                  _context3.next = 16;\n                  break;\n\n                case 11:\n                  _context3.prev = 11;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  console.error(_context3.t0); // show notice\n\n                  _context3.next = 16;\n                  return notice({\n                    title: \"Deleted failed\",\n                    severity: \"error\",\n                    content: _context3.t0.toString()\n                  });\n\n                case 16:\n                  resolve();\n\n                case 17:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 11]]);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  };\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/menu/controllers/editableController.tsx"],"names":["rxDb","Collection","Primary","notice","editableController","collection","name","primary","onRowAdd","newData","Promise","resolve","db","parent","insert","title","console","error","severity","content","toString","onRowUpdate","query","findOne","where","eq","update","$set","onRowDelete","oldData","remove"],"mappings":"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","sourcesContent":["import rxDb from \"@/utils/database/rxConnect\"\nimport { EditableDataType } from \"@/components/CommonTable/models/editable\"\nimport { Type } from \"../types\"\nimport { Collection } from \"../collections\"\nimport { Primary } from \"../schema\"\nimport { notice } from \"@/core\"\n\nexport function editableController(): EditableDataType<Type> {\n  const collection = Collection.name\n  const primary = Primary\n\n  return {\n    // isEditable: rowData => rowData.not_editable === true, // only name(a) rows would be editable\n    // isDeletable: rowData => rowData.not_deletable === true, // only name(a) rows would be deletable\n    onRowAdd: newData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n          const parent = newData.parent || \"\"\n\n          await db[collection].insert({ ...newData, parent })\n\n          // show notice\n          await notice({ title: `Created successful` })\n        } catch (e) {\n          console.error(e)\n          // console.log(e.parameters.errors.toString())\n\n          // show notice\n          await notice({\n            title: `Created failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowUpdate: newData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(newData[primary])\n\n          await query.update({\n            $set: newData\n          })\n\n          // show notice\n          await notice({ title: `Updated successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Updated failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      }),\n    onRowDelete: oldData =>\n      new Promise(async resolve => {\n        try {\n          const db = await rxDb()\n\n          const query = db[collection]\n            .findOne()\n            .where(primary)\n            .eq(oldData[primary])\n\n          await query.remove()\n\n          // show notice\n          await notice({ title: `Deleted successful` })\n        } catch (e) {\n          console.error(e)\n\n          // show notice\n          await notice({\n            title: `Deleted failed`,\n            severity: \"error\",\n            content: e.toString()\n          })\n        }\n\n        resolve()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}