{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { MTableToolbar } from \"material-table\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\";\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\";\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\";\nimport { Columns } from \"./columns\";\nimport { Schema } from \"./schema\";\nimport { Data } from \"./data\";\nimport EvaIcon from \"react-eva-icons\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { fsDownload } from \"@/utils/scripts/fs\";\n// @ts-ignore\nimport JSONInput from \"react-json-editor-ajrm\"; // @ts-ignore\n\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport MigrationDialogs from \"./components/Dialog\";\nimport { useTranslation } from \"react-i18next\";\nexport default function MigrationContainer() {\n  _s();\n\n  var _this = this;\n\n  var _useTranslation = useTranslation(\"table\"),\n      t = _useTranslation.t;\n\n  var theme = useTheme();\n  var color = theme.bunadmin.iconColor;\n\n  var _useState = useState({\n    name: \"schema\",\n    mode: \"Export\"\n  }),\n      selData = _useState[0],\n      setSelData = _useState[1];\n\n  var _useState2 = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  }),\n      modalState = _useState2[0],\n      setModalState = _useState2[1];\n\n  var _useState3 = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  }),\n      uploadModal = _useState3[0],\n      setUploadModal = _useState3[1];\n\n  return __jsx(React.Fragment, null, __jsx(React.Fragment, null, __jsx(CommonTableHead, {\n    title: t(Schema.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), __jsx(CommonTable, {\n    title: t(Schema.title),\n    columns: Columns({\n      t: t\n    }),\n    data: Data({\n      t: t\n    }) // style\n    ,\n    style: DefaultProps.style // icons\n    ,\n    icons: tableIcons({\n      theme: theme\n    }) // options\n    ,\n    options: _objectSpread(_objectSpread({}, DefaultProps.options), {}, {\n      selection: false\n    }) // actions\n    ,\n    actions: [{\n      tooltip: \"Export\",\n      icon: function icon() {\n        return __jsx(EvaIcon, {\n          name: \"download-outline\",\n          size: \"large\",\n          fill: color,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }\n        });\n      },\n      onClick: function () {\n        var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_evt, data) {\n          var db, collection;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (\"name\" in data) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  _context.next = 4;\n                  return rxDb();\n\n                case 4:\n                  db = _context.sent;\n                  collection = data.name;\n                  db[collection].dump().then(function (json) {\n                    return fsDownload(json, collection, \"application/json\");\n                  });\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function onClick(_x, _x2) {\n          return _onClick.apply(this, arguments);\n        }\n\n        return onClick;\n      }()\n    }, {\n      tooltip: \"Import\",\n      icon: function icon() {\n        return __jsx(EvaIcon, {\n          name: \"upload-outline\",\n          size: \"large\",\n          fill: color,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }\n        });\n      },\n      onClick: function () {\n        var _onClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_evt, data) {\n          var msg;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (\"name\" in data) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 2:\n                  msg = \"Do you want to restore \".concat(data.name, \"?\");\n                  setUploadModal({\n                    title: \"Import / Restore\",\n                    open: uploadModal.open + 1,\n                    msg: msg\n                  });\n                  setSelData({\n                    name: data.name,\n                    mode: \"Export DB\"\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function onClick(_x3, _x4) {\n          return _onClick2.apply(this, arguments);\n        }\n\n        return onClick;\n      }()\n    }],\n    components: {\n      Toolbar: function Toolbar(props) {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }\n        }, __jsx(MTableToolbar, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        })), __jsx(\"div\", {\n          style: {\n            padding: \"0px 10px\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }\n        }, __jsx(IconButton, {\n          \"aria-label\": \"account of current user\",\n          \"aria-controls\": \"menu-appbar\",\n          \"aria-haspopup\": \"true\",\n          onClick: function onClick() {\n            var msg = \"Do you want to backup Local Database?\";\n            setModalState({\n              title: \"Clone / Backup\",\n              open: modalState.open + 1,\n              msg: msg\n            });\n            setSelData({\n              name: \"Database\",\n              mode: \"Export DB\"\n            });\n          },\n          color: \"inherit\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }\n        }, __jsx(EvaIcon, {\n          name: \"save-outline\",\n          size: \"large\",\n          fill: theme.bunadmin.iconColor,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }\n        })), __jsx(IconButton, {\n          \"aria-label\": \"account of current user\",\n          \"aria-controls\": \"menu-appbar\",\n          \"aria-haspopup\": \"true\",\n          onClick: function onClick() {\n            var msg = \"Do you want to overwrite Local Database?\";\n            setUploadModal({\n              title: \"Restore Local Database\",\n              open: uploadModal.open + 1,\n              msg: msg\n            });\n            setSelData({\n              name: \"ALL\",\n              mode: \"Import DB\"\n            });\n          },\n          color: \"inherit\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 19\n          }\n        }, __jsx(EvaIcon, {\n          name: \"edit-2-outline\",\n          size: \"large\",\n          fill: theme.bunadmin.iconColor,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }\n        }))));\n      }\n    } // detailPanel\n    ,\n    detailPanel: [{\n      icon: \"code\",\n      render: function render(rowData) {\n        if (!rowData.columns) {\n          return __jsx(\"div\", {\n            style: {\n              color: \"white\",\n              backgroundColor: theme.bunadmin.iconColor,\n              padding: \"10px 30px\"\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }\n          }, rowData.columns || \"COLUMNS IS EMPTY\");\n        } else {\n          var json = rowData.columns || {};\n          return __jsx(JSONInput, {\n            viewOnly: true,\n            theme: \"light_mitsuketa_tribute\",\n            placeholder: json,\n            locale: locale,\n            style: {\n              outerBox: {\n                width: \"100%\"\n              },\n              container: {\n                width: \"100%\",\n                fontSize: 14\n              }\n            },\n            colors: {\n              background: theme.bunadmin.jsonViewBg,\n              \"default\": theme.palette.primary.light\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }\n          });\n        } // check columns\n\n      } // render\n\n    } // item\n    ],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), __jsx(MigrationDialogs, {\n    selData: selData,\n    modalState: modalState,\n    uploadModal: uploadModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(MigrationContainer, \"9/8YVW3bedXo1X5LIpoozH4QnRI=\", false, function () {\n  return [useTranslation, useTheme];\n});\n\n_c = MigrationContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MigrationContainer\");","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/core/migration/index.tsx"],"names":["React","useState","MTableToolbar","useTheme","CommonTableDefaultProps","DefaultProps","CommonTable","CommonTableHead","tableIcons","Columns","Schema","Data","EvaIcon","rxDb","IconButton","fsDownload","JSONInput","locale","MigrationDialogs","useTranslation","MigrationContainer","t","theme","color","bunadmin","iconColor","name","mode","selData","setSelData","open","title","msg","modalState","setModalState","uploadModal","setUploadModal","style","options","selection","tooltip","icon","onClick","_evt","data","db","collection","dump","then","json","Toolbar","props","padding","render","rowData","columns","backgroundColor","outerBox","width","container","fontSize","background","jsonViewBg","palette","primary","light"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nimport { MTableToolbar } from \"material-table\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport { CommonTableDefaultProps as DefaultProps } from \"@/components/CommonTable/models/defaultProps\"\n\nimport CommonTable, { CommonTableHead } from \"@/components/CommonTable\"\nimport tableIcons from \"@/components/CommonTable/models/tableIcons\"\nimport { Columns } from \"./columns\"\nimport { Schema } from \"./schema\"\nimport { Data } from \"./data\"\nimport EvaIcon from \"react-eva-icons\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { fsDownload } from \"@/utils/scripts/fs\"\nimport { Type } from \"./types\"\n// @ts-ignore\nimport JSONInput from \"react-json-editor-ajrm\"\n// @ts-ignore\nimport locale from \"react-json-editor-ajrm/locale/en\"\nimport MigrationDialogs from \"./components/Dialog\"\nimport { useTranslation } from \"react-i18next\"\n\nexport default function MigrationContainer() {\n  const { t } = useTranslation(\"table\")\n  const theme = useTheme()\n  const color: string = theme.bunadmin.iconColor\n  const [selData, setSelData] = useState({\n    name: \"schema\",\n    mode: \"Export\"\n  })\n  const [modalState, setModalState] = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  })\n  const [uploadModal, setUploadModal] = useState({\n    open: 0,\n    title: \"\",\n    msg: \"\"\n  })\n\n  return (\n    <>\n      <>\n        <CommonTableHead title={t(Schema.title)} />\n        <CommonTable\n          title={t(Schema.title)}\n          columns={Columns({ t })}\n          data={Data({ t }) as any}\n          // style\n          style={DefaultProps.style}\n          // icons\n          icons={tableIcons({ theme })}\n          // options\n          options={{ ...DefaultProps.options, selection: false }}\n          // actions\n          actions={[\n            {\n              tooltip: \"Export\",\n              icon: () => (\n                <EvaIcon name=\"download-outline\" size=\"large\" fill={color} />\n              ),\n              onClick: async (_evt, data: Type[] | Type) => {\n                if (!(\"name\" in data)) return\n                const db = await rxDb()\n                const collection = data.name\n                db[collection]\n                  .dump()\n                  .then((json: any) =>\n                    fsDownload(json, collection, \"application/json\")\n                  )\n              }\n            },\n            {\n              tooltip: \"Import\",\n              icon: () => (\n                <EvaIcon name=\"upload-outline\" size=\"large\" fill={color} />\n              ),\n              onClick: async (_evt, data: Type[] | Type) => {\n                if (!(\"name\" in data)) return\n                const msg = `Do you want to restore ${data.name}?`\n                setUploadModal({\n                  title: \"Import / Restore\",\n                  open: uploadModal.open + 1,\n                  msg\n                })\n                setSelData({\n                  name: data.name,\n                  mode: \"Export DB\"\n                })\n              }\n            }\n          ]}\n          components={{\n            Toolbar: props => (\n              <div>\n                <MTableToolbar {...props} />\n                <div style={{ padding: \"0px 10px\" }}>\n                  <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => {\n                      const msg = \"Do you want to backup Local Database?\"\n                      setModalState({\n                        title: \"Clone / Backup\",\n                        open: modalState.open + 1,\n                        msg\n                      })\n                      setSelData({\n                        name: \"Database\",\n                        mode: \"Export DB\"\n                      })\n                    }}\n                    color=\"inherit\"\n                  >\n                    <EvaIcon\n                      name=\"save-outline\"\n                      size=\"large\"\n                      fill={theme.bunadmin.iconColor}\n                    />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    onClick={() => {\n                      const msg = \"Do you want to overwrite Local Database?\"\n                      setUploadModal({\n                        title: \"Restore Local Database\",\n                        open: uploadModal.open + 1,\n                        msg\n                      })\n                      setSelData({\n                        name: \"ALL\",\n                        mode: \"Import DB\"\n                      })\n                    }}\n                    color=\"inherit\"\n                  >\n                    <EvaIcon\n                      name=\"edit-2-outline\"\n                      size=\"large\"\n                      fill={theme.bunadmin.iconColor}\n                    />\n                  </IconButton>\n                </div>\n              </div>\n            )\n          }}\n          // detailPanel\n          detailPanel={[\n            {\n              icon: \"code\",\n              render: rowData => {\n                if (!rowData.columns) {\n                  return (\n                    <div\n                      style={{\n                        color: \"white\",\n                        backgroundColor: theme.bunadmin.iconColor,\n                        padding: \"10px 30px\"\n                      }}\n                    >\n                      {rowData.columns || \"COLUMNS IS EMPTY\"}\n                    </div>\n                  )\n                } else {\n                  const json = rowData.columns || {}\n                  return (\n                    <JSONInput\n                      viewOnly\n                      theme=\"light_mitsuketa_tribute\"\n                      placeholder={json}\n                      locale={locale}\n                      style={{\n                        outerBox: { width: \"100%\" },\n                        container: { width: \"100%\", fontSize: 14 }\n                      }}\n                      colors={{\n                        background: theme.bunadmin.jsonViewBg,\n                        default: theme.palette.primary.light\n                      }}\n                    />\n                  )\n                } // check columns\n              } // render\n            } // item\n          ]}\n        />\n      </>\n      <MigrationDialogs\n        selData={selData}\n        modalState={modalState}\n        uploadModal={uploadModal}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}