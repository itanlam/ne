{"ast":null,"code":"import rxInitData from \"@/utils/database/rxInitData\";\nimport { Collection as Setting, SettingNames } from \"@/core/setting/collections\";\nimport initDocsData from \"@/utils/database/rxInitData/initDocsData\";\nimport requirePlugins from \"@/utils/scripts/requirePlugins\";\nimport rxDb from \"@/utils/database/rxConnect\";\nimport { Primary as AuthPrimary } from \"@/core/auth/schema\";\nimport { ENV } from \"@/utils/config\";\nexport default async function initData() {\n  const db = await rxDb(); // Init Core Setting Data\n\n  await rxInitData({\n    db,\n    collection: Setting.name,\n    name: SettingNames.init_status,\n    initFunc: () => initDocsData({\n      db,\n      collection: Setting.name,\n      docsData: [{\n        name: SettingNames.i18n_code,\n        value: ENV.I18N_CODE\n      }, {\n        name: AuthPrimary,\n        // username\n        value: undefined\n      }, {\n        name: SettingNames.role,\n        value: undefined\n      }, {\n        name: SettingNames.site_name,\n        value: undefined\n      }, {\n        name: SettingNames.theme,\n        value: undefined\n      }]\n    })\n  }); // Init Plugins Data\n\n  const pluginsData = require(\"@plugins/pluginsData\");\n\n  pluginsData.map(async path => {\n    const fileContent = requirePlugins(path);\n    if (!fileContent) return;\n    const initData = fileContent.default; // Init Plugin's Data\n\n    await rxInitData({\n      db,\n      collection: Setting.name,\n      name: `init-${initData.plugin}`,\n      initFunc: async () => {\n        // Loop init DocsData\n        initData.list.map(async item => {\n          await initDocsData({\n            db,\n            collection: item.name,\n            docsData: item.data\n          });\n        });\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/scripts/initData.tsx"],"names":["rxInitData","Collection","Setting","SettingNames","initDocsData","requirePlugins","rxDb","Primary","AuthPrimary","ENV","initData","db","collection","name","init_status","initFunc","docsData","i18n_code","value","I18N_CODE","undefined","role","site_name","theme","pluginsData","require","map","path","fileContent","default","plugin","list","item","data"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,SAASC,UAAU,IAAIC,OAAvB,EAAgCC,YAAhC,QAAoD,4BAApD;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,oBAAvC;AACA,SAASC,GAAT,QAAoB,gBAApB;AAUA,eAAe,eAAeC,QAAf,GAA0B;AACvC,QAAMC,EAAE,GAAG,MAAML,IAAI,EAArB,CADuC,CAGvC;;AACA,QAAMN,UAAU,CAAC;AACfW,IAAAA,EADe;AAEfC,IAAAA,UAAU,EAAEV,OAAO,CAACW,IAFL;AAGfA,IAAAA,IAAI,EAAEV,YAAY,CAACW,WAHJ;AAIfC,IAAAA,QAAQ,EAAE,MACRX,YAAY,CAAC;AACXO,MAAAA,EADW;AAEXC,MAAAA,UAAU,EAAEV,OAAO,CAACW,IAFT;AAGXG,MAAAA,QAAQ,EAAE,CACR;AACEH,QAAAA,IAAI,EAAEV,YAAY,CAACc,SADrB;AAEEC,QAAAA,KAAK,EAAET,GAAG,CAACU;AAFb,OADQ,EAKR;AACEN,QAAAA,IAAI,EAAEL,WADR;AACqB;AACnBU,QAAAA,KAAK,EAAEE;AAFT,OALQ,EASR;AACEP,QAAAA,IAAI,EAAEV,YAAY,CAACkB,IADrB;AAEEH,QAAAA,KAAK,EAAEE;AAFT,OATQ,EAaR;AACEP,QAAAA,IAAI,EAAEV,YAAY,CAACmB,SADrB;AAEEJ,QAAAA,KAAK,EAAEE;AAFT,OAbQ,EAiBR;AACEP,QAAAA,IAAI,EAAEV,YAAY,CAACoB,KADrB;AAEEL,QAAAA,KAAK,EAAEE;AAFT,OAjBQ;AAHC,KAAD;AALC,GAAD,CAAhB,CAJuC,CAqCvC;;AACA,QAAMI,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACAD,EAAAA,WAAW,CAACE,GAAZ,CAAgB,MAAOC,IAAP,IAAwB;AACtC,UAAMC,WAAgB,GAAGvB,cAAc,CAACsB,IAAD,CAAvC;AAEA,QAAI,CAACC,WAAL,EAAkB;AAElB,UAAMlB,QAAkB,GAAGkB,WAAW,CAACC,OAAvC,CALsC,CAOtC;;AACA,UAAM7B,UAAU,CAAC;AACfW,MAAAA,EADe;AAEfC,MAAAA,UAAU,EAAEV,OAAO,CAACW,IAFL;AAGfA,MAAAA,IAAI,EAAG,QAAOH,QAAQ,CAACoB,MAAO,EAHf;AAIff,MAAAA,QAAQ,EAAE,YAAY;AACpB;AACAL,QAAAA,QAAQ,CAACqB,IAAT,CAAcL,GAAd,CAAkB,MAAMM,IAAN,IAAc;AAC9B,gBAAM5B,YAAY,CAAC;AACjBO,YAAAA,EADiB;AAEjBC,YAAAA,UAAU,EAAEoB,IAAI,CAACnB,IAFA;AAGjBG,YAAAA,QAAQ,EAAEgB,IAAI,CAACC;AAHE,WAAD,CAAlB;AAKD,SAND;AAOD;AAbc,KAAD,CAAhB;AAeD,GAvBD;AAwBD","sourcesContent":["import rxInitData from \"@/utils/database/rxInitData\"\nimport { Collection as Setting, SettingNames } from \"@/core/setting/collections\"\nimport initDocsData from \"@/utils/database/rxInitData/initDocsData\"\nimport requirePlugins from \"@/utils/scripts/requirePlugins\"\nimport rxDb from \"@/utils/database/rxConnect\"\nimport { Primary as AuthPrimary } from \"@/core/auth/schema\"\nimport { ENV } from \"@/utils/config\"\n\ninterface InitData {\n  plugin: string\n  list: {\n    name: string\n    data: any\n  }[]\n}\n\nexport default async function initData() {\n  const db = await rxDb()\n\n  // Init Core Setting Data\n  await rxInitData({\n    db,\n    collection: Setting.name,\n    name: SettingNames.init_status,\n    initFunc: () =>\n      initDocsData({\n        db,\n        collection: Setting.name,\n        docsData: [\n          {\n            name: SettingNames.i18n_code,\n            value: ENV.I18N_CODE\n          },\n          {\n            name: AuthPrimary, // username\n            value: undefined\n          },\n          {\n            name: SettingNames.role,\n            value: undefined\n          },\n          {\n            name: SettingNames.site_name,\n            value: undefined\n          },\n          {\n            name: SettingNames.theme,\n            value: undefined\n          }\n        ]\n      })\n  })\n\n  // Init Plugins Data\n  const pluginsData = require(\"@plugins/pluginsData\")\n  pluginsData.map(async (path: string) => {\n    const fileContent: any = requirePlugins(path)\n\n    if (!fileContent) return\n\n    const initData: InitData = fileContent.default\n\n    // Init Plugin's Data\n    await rxInitData({\n      db,\n      collection: Setting.name,\n      name: `init-${initData.plugin}`,\n      initFunc: async () => {\n        // Loop init DocsData\n        initData.list.map(async item => {\n          await initDocsData({\n            db,\n            collection: item.name,\n            docsData: item.data\n          })\n        })\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}