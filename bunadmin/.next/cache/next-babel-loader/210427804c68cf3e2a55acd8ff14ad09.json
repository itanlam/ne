{"ast":null,"code":"import RxDB from \"rxdb\";\nimport { rxCollections } from \"./rxCollections\";\nRxDB.plugin(require(\"pouchdb-adapter-idb\"));\nRxDB.plugin(require(\"pouchdb-adapter-http\")); //enable syncing over http\n\nlet dbPromise = false;\n\nconst _create = async () => {\n  const db = await RxDB.create({\n    name: \"bunadmin\",\n    // <- name\n    adapter: \"idb\",\n    // <- storage-adapter\n    password: \"JUUFblX8pY9BeBs9RF68N7n\",\n    // <- password (optional)\n    multiInstance: true,\n    // <- multiInstance (optional, default: true)\n    queryChangeDetection: false,\n    // <- queryChangeDetection (optional, default: false)\n    ignoreDuplicate: true\n  });\n  console.log(\"DatabaseService: created database\"); // show flash icon in title\n\n  db.waitForLeadership().then(() => {\n    console.log(\"isLeader now\");\n    document.title = \"⚡\" + document.title;\n  }); // create collections\n\n  await Promise.all(rxCollections.map(collObj => db.collection(collObj)));\n  console.log(\"DatabaseService: create collections\");\n  return db;\n};\n\nexport default function rxDb() {\n  if (!dbPromise) dbPromise = _create();\n  return dbPromise;\n}","map":{"version":3,"sources":["/Volumes/Untitled/GitHub/itanlam/ne/bunadmin/src/utils/database/rxConnect.tsx"],"names":["RxDB","rxCollections","plugin","require","dbPromise","_create","db","create","name","adapter","password","multiInstance","queryChangeDetection","ignoreDuplicate","console","log","waitForLeadership","then","document","title","Promise","all","map","collObj","collection","rxDb"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAGAD,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,qBAAD,CAAnB;AACAH,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,sBAAD,CAAnB,E,CAA6C;;AAE7C,IAAIC,SAAS,GAAG,KAAhB;;AAEA,MAAMC,OAAO,GAAG,YAAY;AAC1B,QAAMC,EAAE,GAAG,MAAMN,IAAI,CAACO,MAAL,CAAY;AAC3BC,IAAAA,IAAI,EAAE,UADqB;AACT;AAClBC,IAAAA,OAAO,EAAE,KAFkB;AAEX;AAChBC,IAAAA,QAAQ,EAAE,yBAHiB;AAGU;AACrCC,IAAAA,aAAa,EAAE,IAJY;AAIN;AACrBC,IAAAA,oBAAoB,EAAE,KALK;AAKE;AAC7BC,IAAAA,eAAe,EAAE;AANU,GAAZ,CAAjB;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAT0B,CAW1B;;AACAT,EAAAA,EAAE,CAACU,iBAAH,GAAuBC,IAAvB,CAA4B,MAAM;AAChCH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAG,IAAAA,QAAQ,CAACC,KAAT,GAAiB,MAAMD,QAAQ,CAACC,KAAhC;AACD,GAHD,EAZ0B,CAiB1B;;AACA,QAAMC,OAAO,CAACC,GAAR,CAAYpB,aAAa,CAACqB,GAAd,CAAkBC,OAAO,IAAIjB,EAAE,CAACkB,UAAH,CAAcD,OAAd,CAA7B,CAAZ,CAAN;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEA,SAAOT,EAAP;AACD,CAtBD;;AAwBA,eAAe,SAASmB,IAAT,GAAgB;AAC7B,MAAI,CAACrB,SAAL,EAAgBA,SAAS,GAAGC,OAAO,EAAnB;AAChB,SAAOD,SAAP;AACD","sourcesContent":["import RxDB from \"rxdb\"\nimport { rxCollections } from \"./rxCollections\"\nimport { RxDatabase } from \"rxdb/dist/typings/types\"\n\nRxDB.plugin(require(\"pouchdb-adapter-idb\"))\nRxDB.plugin(require(\"pouchdb-adapter-http\")) //enable syncing over http\n\nlet dbPromise = false as boolean | Promise<RxDatabase<any>>\n\nconst _create = async () => {\n  const db = await RxDB.create({\n    name: \"bunadmin\", // <- name\n    adapter: \"idb\", // <- storage-adapter\n    password: \"JUUFblX8pY9BeBs9RF68N7n\", // <- password (optional)\n    multiInstance: true, // <- multiInstance (optional, default: true)\n    queryChangeDetection: false, // <- queryChangeDetection (optional, default: false)\n    ignoreDuplicate: true\n  })\n  console.log(\"DatabaseService: created database\")\n\n  // show flash icon in title\n  db.waitForLeadership().then(() => {\n    console.log(\"isLeader now\")\n    document.title = \"⚡\" + document.title\n  })\n\n  // create collections\n  await Promise.all(rxCollections.map(collObj => db.collection(collObj)))\n  console.log(\"DatabaseService: create collections\")\n\n  return db\n}\n\nexport default function rxDb() {\n  if (!dbPromise) dbPromise = _create()\n  return dbPromise\n}\n"]},"metadata":{},"sourceType":"module"}